<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue源码之响应式原理</title>
      <link href="2022/04/22/reactive-principle/"/>
      <url>2022/04/22/reactive-principle/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220422200802767.png" alt="image-20220422200802767" loading="lazy"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>提到响应式，大家对响应式的概念就是，当底层数据发生变化时，页面就会自动重新渲染，那么这里面的内部究竟做了什么呢？别急，看了这篇文章之后，大家会对响应式有个大概的认知，知道内部是如何实现的，我们就以一个简单版本的Vue来说吧！</p><h2 id="Vue响应式原理分析"><a href="#Vue响应式原理分析" class="headerlink" title="Vue响应式原理分析"></a>Vue响应式原理分析</h2><p>说到Vue，我们先来思考一下我们之前是如何使用Vue的，我们首先会调用Vue的构造函数，然后传入一个对象，该对象内有<code>el</code>和<code>data</code>等各种属性，然后我们可以在模板（<code>html</code>）中使用插值表达式、<code>v-model</code>去将我们的数据取出来，然后渲染出来。大致代码长这个样子：</p><pre class="language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div id&#x3D;&quot;app&quot;&gt;        &lt;h1&gt;插值表达式&lt;&#x2F;h1&gt;        &lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;span&gt;         &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;count&quot; &#x2F;&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;vue&#x2F;2.6.9&#x2F;vue.common.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;let vm &#x3D; new Vue(&#123;        el: &#39;#app&#39;,        data: &#123;            msg: &#39;我是消息&#39;,            count: 10        &#125;    &#125;);&lt;&#x2F;script&gt;</code></pre><p>接下来，我们打印以下上面的vm对象，看看里面有哪些属性：</p><p>// 假装有张图片</p><p>我们可以看到，在打印出来的<code>vm</code>对象中，有我们刚刚定义的<code>msg</code>和<code>count</code>，那么<code>vue</code>就将<code>data</code>中所有的属性通过某种方式变成了<code>get msg: f()</code>、<code>set msg: f()</code>、<code>get count: f() </code>、<code>set count: f()</code>，然后注入到<code>Vue</code>的实例中。从而我们能够使用<code>this.count</code>这种方式访问到数据。我们还注意到，<code>Vue</code>的实例对象中还有一个<code>$data</code>对象以及<code>$options</code>，展开后发现，其实就是我们传进去的<code>data</code>，只不过变成了响应式的数据，而<code>$options</code>其实就是记录着实例化<code>Vue</code>对象时所传入的那个对象。内部还有一个<code>$el</code>，里面存放着的就是容器。好了，解释了这么多，我们接下来看一个流程图——Vue的工作原理，换句话说，初始化Vue的时候做了什么，在这里我们仅仅保留个印象就好，具体实现我们会在后面一一介绍。</p><p>// 再次假装有图片</p><p>当我们实例化Vue对象的时候，内部先调用Observer这个构造函数，将我们的data里面的数据变成响应式的数据，然后同时调用Compiler构造函数，去解析我们的插值表达式以及各种指令。当数据发生变化时，Dep添加watcher， 并通知所有的观察者去调用update方法去更新视图。</p><h2 id="发布-订阅者模式"><a href="#发布-订阅者模式" class="headerlink" title="发布-订阅者模式"></a>发布-订阅者模式</h2><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h2 id="简易版Vue实现"><a href="#简易版Vue实现" class="headerlink" title="简易版Vue实现"></a>简易版Vue实现</h2><h3 id="Vue构造函数实现"><a href="#Vue构造函数实现" class="headerlink" title="Vue构造函数实现"></a>Vue构造函数实现</h3><h3 id="Observer构造函数实现"><a href="#Observer构造函数实现" class="headerlink" title="Observer构造函数实现"></a>Observer构造函数实现</h3><h3 id="Compiler构造函数实现"><a href="#Compiler构造函数实现" class="headerlink" title="Compiler构造函数实现"></a>Compiler构造函数实现</h3><h3 id="Dep构造函数实现"><a href="#Dep构造函数实现" class="headerlink" title="Dep构造函数实现"></a>Dep构造函数实现</h3><h3 id="Watcher构造函数实现"><a href="#Watcher构造函数实现" class="headerlink" title="Watcher构造函数实现"></a>Watcher构造函数实现</h3><h3 id="双向绑定原理实现"><a href="#双向绑定原理实现" class="headerlink" title="双向绑定原理实现"></a>双向绑定原理实现</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 响应式原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码之虚拟dom和diff算法（下）</title>
      <link href="2022/04/17/virtualDom-and-diff-bottom/"/>
      <url>2022/04/17/virtualDom-and-diff-bottom/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220415220203679.png" alt="image-20220415220203679" loading="lazy"></p><a id="more"></a><p>上篇：<a href="https://indexsarrol.cn/2022/04/15/virtualDom-and-diff-top/">Vue源码之虚拟dom和diff算法（下）</a></p><h2 id="Diff算法——patch函数"><a href="#Diff算法——patch函数" class="headerlink" title="Diff算法——patch函数"></a>Diff算法——patch函数</h2><p>当我们去研究<code>snabbdom</code>这个库的时候，发现DIff算法是在<code>patch</code>函数种完成的。<code>patch</code>函数则是通过<code>init</code>函数返回出来的，由于<code>init</code>函数跟<code>Diff</code>算法没有多大关系，我们在这里就不做过多解释。那么具体在<code>patch</code>函数中，Diff到底做了些什么呢？我们一步一步去看，首先，<code>patch</code>函数有两个参数<code>oldVnode</code>和 <code>newVnode</code>，然后针对新旧节点进行比较。流程图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220415214849569.png" alt="image-20220415214849569" loading="lazy"></p><p>由流程图，我们可以得知，当我们去调用<code>patch</code>函数时，内部会执行以下几个步骤。</p><blockquote><ol><li>判断旧节点是否为虚拟节点，如果不是虚拟节点，则先将该节点转换成虚拟节点。其实这里不难理解，只有大家都是虚拟节点的时候才方便比较，毕竟js对象的比较相较于真实DOM可好比较太多了；</li><li>如果新旧节点都为虚拟节点，则判断新旧虚拟节点是否为同一个节点，如果为同一个节点，则进行深层次的比较。如果不是，则直接把旧节点删除，将新节点直接插入。</li></ol></blockquote><p>接下来，我们来一起简单的手写一下<code>patch</code>函数。新建<code>patch.js</code>文件，首先导入我们之前写好的<code>vnode.js</code>：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> vnode <span class="token keyword">from</span> <span class="token string">'./vnode.js'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isSameVnode</span> <span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> oldVnode<span class="token punctuation">.</span>key <span class="token operator">===</span> newVnode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> oldVnode<span class="token punctuation">.</span>sel <span class="token operator">===</span> newVnode<span class="token punctuation">.</span>sel<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 判断当前传入的旧节点是否为虚拟节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldVnode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 2. 将真实节点转换成虚拟节点</span>        oldVnode <span class="token operator">=</span> <span class="token function">vnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> oldVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">// 3. 判断新旧节点是否为相同节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> newVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO: 进行细节化的比较</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 4. 暴力拆除旧的，插入新的节点</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="createElement方法"><a href="#createElement方法" class="headerlink" title="createElement方法"></a>createElement方法</h3><p>当我们写到这里时，我们需要去拆除旧的，插入新的，这里的拆除和插入都是针对真实节点来的，所以我们需要先去封装一下常用的创建方法。在当前目录下新建<code>createElement.js</code>文件，用于将虚拟节点创建成真实节点。以便上树使用，那么这里的<code>createElement.js</code>内部做了以下的事：</p><ol><li>将传入的vnode转换成真实DOM节点；</li><li>判断子节点类型；</li><li>如果子节点不是文本类型，则遍历子节点的数组，递归调用<code>createElement</code>方法，生成真实DOM再依次填充到上一次生成的DOM节点上；</li><li>如果子节点为文本类型，则将<code>vnode.text</code>直接赋值给创建出来的真实DOM的<code>innerText</code>；</li><li>将真实DOM挂载到<code>vnode</code>的<code>elm</code>属性中；</li><li>返回真实 DOM。</li></ol><p>具体流程图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220417204508747.png" alt="image-20220417204508747" loading="lazy"></p><p>具体代码如下：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// createElement.js</span><span class="token comment">// 将vnode创建为真实节点，插入到pivot元素之前</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 将传入的虚拟节点创建为真实节点</span>    <span class="token keyword">const</span> realDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>sel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 判断虚拟节点的子节点类型</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 3. 如果为文本类型，则直接将vnode.text直接赋值给创建出来的真实DOM的innerText</span>        realDom<span class="token punctuation">.</span>innerText <span class="token operator">=</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 4. 如果子节点不是文本类型，则遍历子节点的数组，递归调用createElement方法</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> child <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> childDom <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>            realDom<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>childDom<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 5. 将真实DOM挂载到`vnode`的`elm`属性中</span>    vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> realDom<span class="token punctuation">;</span>    <span class="token comment">// 6. 将真实的DOM返回出去</span>    <span class="token keyword">return</span> realDom<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>那么我们这个时候再回到<code>patch.js</code>文件中，引入刚刚写好的<code>createElement.js</code>文件。</p><pre class="language-JS" data-language="JS"><code class="language-JS">...import createElement from &#39;.&#x2F;createElement.js&#39;;export default function patch(oldVnode, newVnode) &#123;    ...other code   &#x2F;&#x2F; 3. 判断新旧节点是否为相同节点    if (isSameVnode(oldVnode, newVnode)) &#123;        &#x2F;&#x2F; TODO: 进行细节化的比较    &#125; else &#123;        &#x2F;&#x2F; 4. 暴力拆除旧的，插入新的节点        let newVnodeElm &#x3D; createElement(newVnode);        &#x2F;&#x2F; 插入到老节点之前        if (oldVnode.elm.parentNode &amp;&amp; newVnode) &#123;            oldVnode.elm.parentNode.insertBefore(newVnodeElm, oldVnode.elm);        &#125;        &#x2F;&#x2F; 删除老节点        oldVnode.elm.parentNode.removeChild(oldVnode.elm);    &#125;&#125;</code></pre><h3 id="patchVnode方法"><a href="#patchVnode方法" class="headerlink" title="patchVnode方法"></a>patchVnode方法</h3><p>由上述我们可知，当新旧节点在进行比较的时候，如果<code>sel</code>属性和<code>key</code>属性相同，则被认为是同一个节点（不是内存地址的相同），进而调用<code>patchVnode</code>方法，<code>patchVnode</code>方法无非做了这几件事：</p><ul><li>新节点有<code>text</code>属性，旧节点有<code>text</code>属性   ===&gt;   将新<code>text</code>覆盖旧<code>text</code>;</li><li>新节点有<code>text</code>属性，旧节点有<code>children</code>属性   ===&gt;  将新<code>text</code>覆盖旧<code>children</code>;</li><li>新节点有<code>children</code>属性，旧节点有<code>text</code>属性   ===&gt;  将旧节点<code>text</code>置空，将新<code>children</code>追加；</li><li>新节点有<code>children</code>属性，旧节点有<code>children</code>属性   ===&gt;   调用<code>updateChildren</code>方法，优化更新策略。</li></ul><p>所以话不多说，直接上流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220417213449350.png" alt="image-20220417213449350" loading="lazy"></p><p>通过上述流程图我们可以清楚的看到这四种的比较情况；针对这四种情况分别如何处理，流程图看的很清楚，这里就一一解释了，以下贴出代码（非官网，自己手写）：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">patchVnode</span><span class="token punctuation">(</span><span class="token parameter">oldVnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 如果新旧节点是内存地址中的相等，则直接return</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode <span class="token operator">===</span> newVnode<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 判断新节点是否存在text属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>text <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>newVnode<span class="token punctuation">.</span>children<span class="token operator">?.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 3. 判断旧节点是否存在text属性，如果存在则直接替换，不存在的话，则代表有children，一律使用innerText强制替换</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>innerText <span class="token operator">=</span> newVnode<span class="token punctuation">.</span>text<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//  新节点存在children属性</span>        <span class="token comment">// 4. 旧节点存在children属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token operator">?.</span>children<span class="token operator">?.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// TODO 调用updateChildren方法</span>            <span class="token comment">// updateChildren(oldVnode, newVnode);</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//5. 旧接点存在text属性, 将旧节点的text设置为空字符串，然后将新节点的children处插入到就节点的子节点</span>            oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token comment">// 6. 遍历新节点的children，生成真实dom，然后appendChild</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newVnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> chDOM <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>newVnode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>chDOM<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="updateChildren方法"><a href="#updateChildren方法" class="headerlink" title="updateChildren方法"></a>updateChildren方法</h2><p>整个diff算法中，最核心的估计就是这个方法了，他是用来比较新旧节点都存在子节点的情况的，做到最小量更新，那么这个方法中做了一个很核心的命中规则，而且引入了4个比较指针，分别为新前、旧前、新后、旧后，那么这是什么意思呢？</p><ul><li>新前：指的是新的虚拟节点最开始的节点；</li><li>新后：指的是新的虚拟节点中最后的节点；</li><li>旧前：指的是旧的虚拟节点最开始的节点；</li><li>旧后：指的是旧的虚拟节点中最后的节点；</li></ul><p>而这里同时也有一个命中规则，分别是：</p><ol><li>新前节点与旧前节点比较；</li><li>新后节点与旧前节点比较；</li><li>新后节点与旧前节点比较；</li><li>旧后节点与新前节点比较；</li></ol><p>比较逻辑如下：</p><p>当命中以上某个规则时，即节点比较之后相等，则让新节点与后节点的指针发生变化，举个例子：</p><p>当新前节点与旧前节点相等时，则让新前节点的指针向下移动一位，同时让旧前的节点对应的指针也向下移动一位；</p><p>当新后节点与旧后节点相等时，则让新后节点的指针向上移动一位，同时让旧后的节点对应的指针也向上移动一位；</p><p>如果没有命中的话，则依次向下执行命中规则。在这里其实是有个循坏的，循坏条件是：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">while</span><span class="token punctuation">(</span>新前 <span class="token operator">&lt;=</span> 新后 <span class="token operator">&amp;&amp;</span> 旧前 <span class="token operator">&lt;=</span> 旧后<span class="token punctuation">)</span></code></pre><p>也就是说，只要当我们的后节点的指针大于前节点的指针，循环就会停止。循环停止后，又分为两种情况：</p><ol><li>如果是旧节点先循环完毕，则说明新节点中有要插入的节点（即新前与新后之间的节点）</li><li>如果是新节点先循环完毕，如果老节点中还有剩余节点，则删除剩余节点（即旧前与旧后之前的节点）；</li></ol><h3 id="新增节点"><a href="#新增节点" class="headerlink" title="新增节点"></a>新增节点</h3><p>具体的细节我们直接放入例子中做解释即可，要不然太枯燥了。假设我们现在有如下节点，现在开始进入比对：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220418215956405.png" alt="image-20220418215956405" loading="lazy"></p><ul><li>第一步，判断新前和旧前节点是否相同，由上图发现是相同的，则旧前和新前的指针都向下移动一位；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220418220247743.png" alt="image-20220418220247743" loading="lazy"></p><ul><li>第二步，还是判断新前和旧前节点是否命中，此时还是命中，则着旧前和新前的指针向下移动一位；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220418220447483.png" alt="image-20220418220447483" loading="lazy"></p><ul><li>第三步，还是判断新前和旧前节点是否命中，此时还是命中，则着旧前和新前的指针向下移动一位；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220418220759823.png" alt="image-20220418220759823" loading="lazy"></p><p>这是我们发现，旧节点的旧前已经小于旧后了，那么循环终止。这时我们可以得出，是旧节点先循坏结束，则将新前与新后之间的节点，这里是D、E直接插入到真实节点中（其实是插入到旧节点中，再返回旧节点之后，通过<code>createElement</code>方法创建出真实节点）。</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>前面我们说了新增节点，这一节我们来看一下删除节点的例子，删除和新增一样，都是先按照4中命中规则来判断并且加上我们的条件。我们还是先来看图：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220419201804391.png" alt="image-20220419201804391" loading="lazy"></p><p>这里我们可以分析得出，在此次更新节点中，我们发现，新节点中将D这个节点删除了，那么其内部如何去做对比的呢？我们还是按照前面所提到的四种命中方法来做对比：</p><ul><li>第一步，旧前和新前比较，结果：命中，则前指针都向下移动一位；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220419201733783.png" alt="image-20220419201733783" loading="lazy"></p><ul><li>第二步，接着比较旧前和新前，结果：命中，指针接着向下移动一位；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220419201650816.png" alt="image-20220419201650816" loading="lazy"></p><ul><li>第三步，接着比较旧前和新前，结果：不命中，则采用第二种命中方式，结果，命中，则后节点指针向上移动一位；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220419202045816.png" alt="image-20220419202045816" loading="lazy"></p><p>这里我们发现，新后节点的指针已经大于新前节点的指针，所以循环终止。这次是新节点首先遍历完成，则将旧前和旧后指针之间对应的节点删除，在这里就是C节点，对应的真实DOM节点也会被删除。</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220419202345669.png" alt="image-20220419202345669" loading="lazy"></p><h3 id="复杂情况"><a href="#复杂情况" class="headerlink" title="复杂情况"></a>复杂情况</h3><p>前面我们看了一个新增节点和删除节点，这里我们来个反转节点，这一步呢，就是为了让我们能够知道后两种命中方式，也就是新后与旧前和新前与旧后的对比。来看例子：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220419203232662.png" alt="image-20220419203232662" loading="lazy"></p><p>这里我们可以看到，新节点和旧节点的顺序已经完全颠倒，这时候我们就可以命中后两条规则了。</p><ul><li>第一步，旧前新前比较，没有命中；</li><li>第二步，旧后与新后比较，没有命中；</li><li>第三步，新后与旧前比较命中，涉及到移动节点。将旧前指针对应的节点设置为<code>undefined</code>，并且在旧后对应指针的后面新增一个节点，节点为与旧前匹配到的节点，这里即为A节点。然后新后指针向上移动一位，旧前指针向下移动一位。我们直接用图表示，设为<code>undefined</code>:</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220419204335207.png" alt="image-20220419204335207" loading="lazy"></p><p><code>并且在旧后对应指针的后面新增一个节点，节点为与旧前匹配到的节点，这里即为A节点</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220419204851244.png" alt="image-20220419204851244" loading="lazy"></p><p><code>然后新后指针向上移动一位，旧前指针向下移动一位。</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220419204927958.png" alt="image-20220419204927958" loading="lazy"></p><p>在这里由于篇幅的关系，其余的节点小伙伴们可以自己试着按照这种方法推导，这里就不过多的去写了。</p><h3 id="四种命中规则都未命中的情况"><a href="#四种命中规则都未命中的情况" class="headerlink" title="四种命中规则都未命中的情况"></a>四种命中规则都未命中的情况</h3><p>由上可以清楚的知道，命中方式总共有四种，但是还是覆盖不了所有情况，这个时候就需要我们单独进行处理，处理逻辑如下：</p><ul><li>当新前或新旧节点的指针指向新节点的某个节点时，这时去遍历旧节点，去查找新节点指针所对应的节点；</li><li>如果找到了，将旧节点的那一项设置为<code>undefiend</code>，然后将新节点插入到<code>undefined</code>那一项之前即可。</li><li>如果没有找到，说明新节点指针对应的那一项是新增的节点，然后插入到旧前节点之前即可。</li></ul><p>这么说还是太过于枯燥，直接上案例：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220419214551589.png" alt="image-20220419214551589" loading="lazy"></p><ul><li>第一步，新前与旧前比较，命中，指针下移；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220419214647626.png" alt="image-20220419214647626" loading="lazy"></p><ul><li>第二步，旧前新前，不命中。旧后新后，不命中。新后旧前，命中，<ul><li>①则设置旧前对应节点为<code>undefined</code>；</li><li>②将新后节点插入到旧后之后；</li><li>③同时让新后节点对应指针上移，旧前节点对应指针下移；</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220419215510561.png" alt="image-20220419215510561" loading="lazy"></p><ul><li>第三步，旧前新前，不命中。旧后新后，不命中。新后旧前，不命中。新前旧后，命中，<ul><li>① 设置旧后对应指针节点为<code>undefined</code>；</li><li>② 将当前新前节点指针对应的节点，插入到旧前节点的前面（旧前之前）；</li><li>③ 让新前节点指针下移，旧后节点指针上移动；</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220419220303384.png" alt="image-20220419220303384" loading="lazy"></p><ul><li>第四步，旧前新前，不命中。旧后新后，不命中。新后旧前，不命中。新前旧后，不命中，则进入都未命中的阶段；<ul><li>① 遍历旧节点，是否能在旧节点中找到新节点指针对应的节点；</li><li>② 如果找到，将旧节点的那一项设置为<code>undefiend</code>, 将新节点指针对应的节点插入到设置<code>undefined</code>节点之前；</li><li>③如果未找到，说明新节点指针对应的那一项是新增的节点，然后插入到旧前节点之前即可。</li><li>④ 旧后节点指针向上移，新前节点指针下移；循环结束，此时为新节点先循环结束，则删除旧前和旧后之前的节点；</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220419221842789.png" alt="image-20220419221842789" loading="lazy"></p><p>这是我们将真实节点与新节点进行对比，发现结果相同，所以算法执行完毕，比较结束。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是真的diff算法的核心思想，当前，在这里我们由于篇幅的问题，我们并没有将所有的情况都列举在上了，但是只要通过这几种命中方法加未命中判断原则，就能解决一切节点更新思路。不得不说，率先相出这个算法的人是多么的牛叉。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Diff算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码之虚拟dom和diff算法（上）</title>
      <link href="2022/04/15/virtualDom-and-diff-top/"/>
      <url>2022/04/15/virtualDom-and-diff-top/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220415220203679.png" alt="image-20220415220203679" loading="lazy"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着前端框架的发展，现在只停留会使用这些框架上是远远不够的，可以这么说，连面试可能都没法通过，所以现在的面试就要求我们不仅仅要会使用，而且要熟知其原理。虽然在工作当中，我们可能不会去要求我们去手写一些底层原理，但是懂了其原理，我们就可以快速的去定位问题，从而提升我们的工作效率，同时也能锻炼自己的编程能力。虚拟DOM和Diff算法这两个东西现在基本上每个前端同学都听过，而且或多或少的看过一些文章。但是大部分都处于一知半解的状态。懂，但又不是完全懂了。所以我最近也是有点苦恼，然后找了相关的资料狠狠的补习了一下。在这里也当作我的一个笔记吧。</p><h2 id="什么是虚拟DOM和Diff算法"><a href="#什么是虚拟DOM和Diff算法" class="headerlink" title="什么是虚拟DOM和Diff算法"></a>什么是虚拟DOM和Diff算法</h2><h3 id="虚拟DOM是什么？"><a href="#虚拟DOM是什么？" class="headerlink" title="虚拟DOM是什么？"></a>虚拟DOM是什么？</h3><p>虚拟DOM，乍听感觉这个词非常牛逼，非常高大上。我们可以把词给拆开来看，“虚拟”和“<code>DOM</code>”，<code>DOM</code>这个词我们肯定不会陌生，他就是文本对象模型，我们不必再去赘述。那么怎么去理解“虚拟”这个词呢，假的！是“虚拟”可以理解为假的，不真实的，那么我们就可以将虚拟DOM这个词理解为不是真实的DOM——利用js对象来表示真实DOM。也就相当于说虚拟DOM就是真实DOM节点的一个js对象的映射。我们可以参考以下的图片:</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220415133627012.png" alt="image-20220415133627012" loading="lazy"></p><p>我们从上图可以得知，真实DOM的节点都会对应一个虚拟DOM的对象。从而得出结论：</p><blockquote><p>虚拟DOM就是真实DOM的js对象的一个描述。</p></blockquote><h3 id="为什么我们要用虚拟DOM？"><a href="#为什么我们要用虚拟DOM？" class="headerlink" title="为什么我们要用虚拟DOM？"></a>为什么我们要用虚拟DOM？</h3><p>在<code>jquery</code>时代，我们大家都知道，我们是通过操作真实DOM去处理页面的节点进行增删改的操作，可能对于我们来说就是一瞬间的事，但是对于计算机来说，可能需要进行成千上万次的操作，无疑这样是非常浪费性能的，这时候我们就引进了虚拟DOM，将需要更新的节点通过Diff算法进行最小化的更新，从而不再去操作真实DOM，仅对需要变化的节点进行更新操作，大大的节省的性能。</p><h3 id="Diff算法是什么以及为什么要使用它？"><a href="#Diff算法是什么以及为什么要使用它？" class="headerlink" title="Diff算法是什么以及为什么要使用它？"></a>Diff算法是什么以及为什么要使用它？</h3><p>接下来，我们再聊聊Diff算法，那么什么是Diff算法呢。我们这里先直接给Diff算法下个定义：</p><blockquote><p>简单来说Diff算法就是在虚拟DOM树从上至下进行同层比对，找出不同的地方进行最小量化的更新，从而间接更新真实DOM</p></blockquote><p>我们怎么去理解Diff算法呢？这里举一个很简单的例子——装修。加入我现在有一个装修好的房子，现在呢，我想把主卧的床和客厅的沙发给换掉，那我们是不是直接把原来的沙发和床直接丢弃，然后弄个新的就可以了。那么Diff算法就是这么一个逻辑，</p><p>它会先去全局扫描一下，比较我变更前的床和沙发是否一样，如果不一样就直接将新的沙发和床把原来的给替换掉。如果一样的地方，比如电视机，没有变化，那就原封不动。从而节省的很多人力。放到程序中看，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220415135418566.png" alt="image-20220415135418566" loading="lazy"></p><p>在这里我们可以看到，我们在新的DOM元素上添加了一个新的<code>&lt;span&gt;</code>标签以及<code>&lt;li&gt;</code>标签，那么Diff算法就可以进行精细化的比较，从而实现最小化的更新。</p><h2 id="snabbdom简介以及测试环境搭建"><a href="#snabbdom简介以及测试环境搭建" class="headerlink" title="snabbdom简介以及测试环境搭建"></a>snabbdom简介以及测试环境搭建</h2><h3 id="什么是snabbdom？"><a href="#什么是snabbdom？" class="headerlink" title="什么是snabbdom？"></a>什么是snabbdom？</h3><p><code>snabbdom</code>是瑞典语的一个单词，意为“速度”，而我们熟知的<code>Vue.js</code>，其源码也借鉴了<code>snabbdom</code>，可以说<code>snabbdom</code>是虚拟DOM的鼻祖。</p><h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><p>想要知道其内部怎么实现的，我们就需要自己手动的去搭建一个测试环境来进行代码的调试，以及后面手写代码。首先创建文件夹，命名为<code>study-snabbdom</code>，然后执<code>行npm init -y</code></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>snabbdom</code>有很多版本，为了方便，我们就以2.1.0的版本作为测试环境中的版本：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> snabbdom --save</code></pre><h3 id="搭建webpack"><a href="#搭建webpack" class="headerlink" title="搭建webpack"></a>搭建webpack</h3><p>这里我就不在多赘述了，想了解的可直接前往<code>webpack</code><a href="https://webpackjs.com/">官网</a>进行文档查阅。在这里仅把配置项放出来。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    publicPath<span class="token operator">:</span> <span class="token string">'dist'</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">'bundle.js'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  devtool<span class="token operator">:</span> <span class="token string">'cheap-module-source-map'</span><span class="token punctuation">,</span>   devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    port<span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>    contentBase<span class="token operator">:</span> <span class="token string">'www'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="h函数"><a href="#h函数" class="headerlink" title="h函数"></a>h函数</h2><h3 id="h函数是什么？"><a href="#h函数是什么？" class="headerlink" title="h函数是什么？"></a>h函数是什么？</h3><p>什么是<code>h</code>函数呢，简言之：</p><blockquote><p>就是用来生成虚拟节点（<code>vnode</code>）的一个方法。</p></blockquote><h3 id="h函数如何使用？"><a href="#h函数如何使用？" class="headerlink" title="h函数如何使用？"></a>h函数如何使用？</h3><p>比如我们可以这么去调用<code>h</code>函数:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> href<span class="token operator">:</span> <span class="token string">'https://www.baidu.com'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'百度'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样我们就能得到这样的一个虚拟节点：</p><pre class="language-none"><code class="language-none">&#123;sel: &#39;a&#39;, &#x2F;&#x2F; 选择器data: &#123; &#x2F;&#x2F; 相关属性props: &#123;href: &#39;https:&#x2F;&#x2F;www.baidu.com&#39;&#125;&#125;,text: &#39;百度&#39;, &#x2F;&#x2F; 标签内文本内容&#125;</code></pre><p>那么在页面上，他就表示一个真实的A标签的节点</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>我们通过上面可以知道，<code>h</code>函数是负责生成一个虚拟节点的方法，那么，虚拟节点里面都有哪些属性呢？</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"sel"</span><span class="token operator">:</span> <span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token comment">// 选择器</span><span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 属性样式类名等</span>    <span class="token property">"text"</span><span class="token operator">:</span> '<span class="token number">12345</span>'<span class="token punctuation">,</span> <span class="token comment">// 文本内容</span>    <span class="token property">"children"</span><span class="token operator">:</span> undefined<span class="token punctuation">,</span> <span class="token comment">// 子节点</span>    <span class="token property">"elm"</span><span class="token operator">:</span> undefined<span class="token punctuation">,</span> <span class="token comment">// 真实DOM节点</span>    <span class="token property">"key"</span><span class="token operator">:</span> undefined <span class="token comment">// 唯一值</span><span class="token punctuation">&#125;</span></code></pre><h3 id="演示h函数使用以及上树"><a href="#演示h函数使用以及上树" class="headerlink" title="演示h函数使用以及上树"></a>演示h函数使用以及上树</h3><p>在刚刚搭建的环境中，我们在<code>index.js</code>文件中，导入<code>snabbdom</code>相应的模块：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> init<span class="token punctuation">,</span> h <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'snabbdom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> href<span class="token operator">:</span> <span class="token string">'https://www.baidu.com'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'百度'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这是我们可以看到控制台上面输出了一个js对象：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220415144500575.png" alt="image-20220415144500575" loading="lazy"></p><p>那么虚拟节点有了，我们怎么去将这个节点渲染到页面上面呢？这时候我们就要调用<code>snabbdom</code>中的<code>patch</code>函数，来帮助我们完成上树操作：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> init<span class="token punctuation">,</span> propsModule<span class="token punctuation">,</span> h <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'snabbdom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span>propsModule<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> props<span class="token operator">:</span> <span class="token punctuation">&#123;</span> href<span class="token operator">:</span> <span class="token string">'https://www.baidu.com'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'百度'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> container <span class="token operator">=</span> ducument<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们打开页面就可以看到如下：</p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220415145047553.png" alt="image-20220415145047553"  / loading="lazy"><p>这样我们就相当于上树了，并且<code>href</code>属性内的链接是可以点击的。</p><h3 id="h函数更多写法"><a href="#h函数更多写法" class="headerlink" title="h函数更多写法"></a>h函数更多写法</h3><p>在上面我们说过<code>h</code>函数的一些简单的用法，这里我们要介绍一下<code>h</code>函数的新用法——嵌套，话不多说，直接上代码:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'牛奶'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'咖啡'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'可乐'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>那么以上代码，转换成虚拟DOM就变成这样:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>sel<span class="token operator">:</span> <span class="token string">'ul'</span><span class="token punctuation">,</span>data<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> set<span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token string">'牛奶'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> set<span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token string">'咖啡'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> set<span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token string">'可乐'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>我们的<code>h</code>函数，其内部实现了函数的重载，所以参数传递的方式多种多样，例如以下的写法都是可以的：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span> <span class="token comment">// ===> &#123; sel: 'div', text: undefined, children: undefined &#125;</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'我是div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ===>  &#123; sel: 'div', text: '我是div', children: undefined &#125;</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ===>  &#123; sel: 'div', text: undefined, children: [] &#125;</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ===>  &#123; sel: 'div', text: undefined, children: [&#123; sel: undefind, text: undefined, children: undefined &#125;] &#125;</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'我是内部的盒子'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ===>  &#123; sel: 'div', text: undefined, children: [&#123; sel: 'div', text: '我是内部的盒子', children: undefined &#125;]</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'12354'</span><span class="token punctuation">)</span> <span class="token comment">// ===>  &#123; sel: 'div', data: &#123;&#125;, text: '12354', children: undefined &#125;</span></code></pre><p>足以看出，h函数的使用是非常的灵活！</p><h2 id="如何手写一个简单版的h-函数"><a href="#如何手写一个简单版的h-函数" class="headerlink" title="如何手写一个简单版的h()函数"></a>如何手写一个简单版的h()函数</h2><p>由于<code>snabbdom</code>源码内的h函数，实现了函数重载，为了方便，这里我们统一采用传入三个参数的方式进行实现。那我们就开始吧！我们先观察一下这个方法的返回值都是一个对象的形式，而且固定，所以我们可以把返回的对象封装为一个函数<code>vnode</code>：</p><h3 id="vnode函数"><a href="#vnode函数" class="headerlink" title="vnode函数"></a>vnode函数</h3><p><code>vnode</code>函数传入选择器(sel)、数据项(data)、文本(text)、子节点(children)，真实DOM节点(elm)返回一个新的虚拟DOM对象，新建一个<code>vnode.js</code>文件：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// vnode.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">vnode</span><span class="token punctuation">(</span><span class="token parameter">sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> elm</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> data<span class="token punctuation">.</span>key <span class="token operator">?</span> data<span class="token punctuation">.</span>key <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 查询数据项中是否有key</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        sel<span class="token punctuation">,</span>        data<span class="token punctuation">,</span>        children<span class="token punctuation">,</span>        text<span class="token punctuation">,</span>        elm<span class="token punctuation">,</span>        key    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="h函数-1"><a href="#h函数-1" class="headerlink" title="h函数"></a>h函数</h3><p>首先，新建一个名为<code>h.js</code>的函数，并且导入<code>vnode.js</code>，我们在一开始也说过，只实现三个参数的方法。分别是以下三种：</p><pre class="language-none"><code class="language-none">h(&#39;div&#39;, &#123;&#125;, &#39;文本&#39;);h(&#39;div&#39;, &#123;&#125;, []);h(&#39;div&#39;, &#123;&#125;, h(&#39;div&#39;));</code></pre><p>代码如下：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> vnode <span class="token keyword">from</span> <span class="token string">'./vnode.js'</span><span class="token punctuation">;</span><span class="token comment">// 判断是否为文本类型</span><span class="token keyword">function</span> <span class="token function">isText</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'string '</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 判断是否为子节点数组类型</span><span class="token keyword">function</span> <span class="token function">array</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 判断是否为对象且包含sel属性</span><span class="token keyword">function</span> <span class="token function">isObjectAndExitSel</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>sel<span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token parameter">sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1.判断当前传入参数是否为3个，如果不是直接报错</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'参数个数必须为3个!'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 2.判断c参数是文本还是children</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isText</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 2.1如果是文本类型的节点，则直接返回vnode函数</span>        <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">array</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 2.2 如果c是数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObjectAndExitSel</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'传入的数组有一项不是h函数'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObjectAndExitSel</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 2.3 如果是h函数，则被认为是单纯的对象</span>        <span class="token keyword">const</span> children <span class="token operator">=</span> <span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 以上条件全部不满足</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'第三个参数类型不满足要求'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="体验Diff算法"><a href="#体验Diff算法" class="headerlink" title="体验Diff算法"></a>体验Diff算法</h2><p>我们在上述说到了创建虚拟DOM节点，那么我们是怎么通过虚拟节点创建出真实DOM节点的并显示到页面上的呢？我们先来看官方的<code>snabbdom</code>，他是通过<code>patch</code>函数将虚拟节点处理成真实DOM并渲染到页面上的，对于这点，我们上述也说过。但那种情况是第一次页面加载时通过调用<code>patch</code>函数上树的，那么我们怎么去体现对比呢？看一下接下来的例子：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> init<span class="token punctuation">,</span> propsModule<span class="token punctuation">,</span> h <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'snabbdom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span>propsModule<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第一次上树</span><span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> vnode1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>此时页面会出现四个<code>&lt;li&gt;&lt;/li&gt;</code>标签，元素内容分别是A、B、C、D。这时，我们给页面添加一个按钮，同时创建另一个虚拟DOM，当点击按钮时，我们让<code>patch</code>函数重新执行，然后传入<code>vnode1</code>、<code>vnode2</code>，代码如下：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> init<span class="token punctuation">,</span> propsModule<span class="token punctuation">,</span> h <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'snabbdom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span>propsModule<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第一次上树</span><span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> vnode1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建vnode2</span><span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">)</span>，    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取按钮元素</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">patch</span><span class="token punctuation">(</span>vnode1<span class="token punctuation">,</span> vnode2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>此时打开浏览器之后，页面先是展示A、B、C、D，当我们点击按钮时，页面就更新为了A、B、C、D、E。这样就可以获取到最新的DOM，然而这个变化不能说明什么，它真正牛叉的地方并不是这里，而是Diff算法会对比<code>vnode1</code>、<code>vnode2</code>发现在末尾出多了一个E，然后将E给添加上，剩余的A、B、C、D保持不动，那怎么去验证这个说法呢？我们可以打开控制台——元素，然后选取到<code>&lt;li&gt;&lt;/li&gt;</code>标签内容A，将其改为’AAAA’，如果当我们点按钮时，AAAA没有变为A，则说明Diff是最小量更新，也就是没有更新没变化的位置，修改如下图：</p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220415203658950.png" alt="image-20220415203658950"  / loading="lazy"><p>当我们点击按钮有时，发现新增加了一个<code>&lt;li&gt;E&lt;/li&gt;</code>的标签，同时我们刚刚修改的AAAA还是存在的，这就说明，Diff算法采用的最小量更新，如下图所示：</p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220415204745853.png" alt="image-20220415204745853"  / loading="lazy"><p>这时候我们再来玩会这个东西，这玩意有这么智能吗？刚才我们在末尾追加了这个E，如果我们在开头加呢？会发生什么？我们修改一下代码：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> init<span class="token punctuation">,</span> propsModule<span class="token punctuation">,</span> h <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'snabbdom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> patch <span class="token operator">=</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">[</span>propsModule<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第一次上树</span><span class="token function">patch</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> vnode1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建vnode2</span><span class="token keyword">const</span> vnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取按钮元素</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">patch</span><span class="token punctuation">(</span>vnode1<span class="token punctuation">,</span> vnode2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>我们打开控制台后，发现页面上有E、A、B、C、D五个元素，那么他们也是采用最小化更新吗？我们还是用刚才的那种方法试一试，这里为了方便看的清楚，我们把先前的4个元素的内容都改变一下，这是我们再点击按钮，却得到了不可思议的结果。如下：</p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220415205551369.png" alt="image-20220415205551369"  / loading="lazy"><p>结果为什么是这样呢？这里其实Diff算法内部做比较的时候，没有找到key值，所以它认为这几个节点是完全不用的，所以采用全覆盖的方式。就得到了这种结果，这也是我们在循环遍历节点的时候为什么要加上key值的原因，是不是有一种恍然大悟的感觉。我们在这里加上key之后，再来看看：</p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220415210115723.png" alt="image-20220415210115723"  / loading="lazy"><p>加上key值之后，我们可以看到Diff算法帮助我们又进行了一次更新，这次更新并没有全部更新， 只更新了一个节点——E。如果我们没有添加key的话，其实diff默认是将节点E放在末尾的，然后将A改为E，B改为A…一直下去：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220415210857688.png" alt="image-20220415210857688" loading="lazy"></p><p>通过以上种种的实验，我们可以得到几点结论：</p><blockquote><ol><li>Diff的最小量更新的前提是key，key是该节点的唯一标识，告诉Diff算法，在更改前后它们是同一个节点；</li><li>只有是同一个虚拟节点，才会进行最小量更新，否则就直接暴力拆除旧的、插入新的。那么如果判断是否为同一个虚拟节点呢？答案就是选择器相同，且key相同；</li><li>只进行同层比较，不会跨层比较。</li></ol></blockquote><p>下篇：<a href="https://indexsarrol.cn/2022/04/15/virtualDom-and-diff-bottom/">Vue源码之虚拟dom和diff算法（下）</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Diff算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Taro小程序中使用原生echarts——ec-canvas</title>
      <link href="2021/08/22/echarts-in-taro/"/>
      <url>2021/08/22/echarts-in-taro/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在最近的一个小程序版本中，使用了<code>echarts</code>图表，相对传统web端的<code>echarts</code>来说，小程序中嵌入<code>echarts</code>是一件很让人头疼的事，好在<code>echarts</code>官方文档给我提供了已经被封装好的小程序版本的<code>echarts</code>——[ec-canvas](<a href="https://echarts.apache.org/zh/tutorial.html#%E5%9C%A8%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E4%BD%BF%E7%94%A8">https://echarts.apache.org/zh/tutorial.html#在微信小程序中使用</a> ECharts)，接下来一起看看如何使用吧！</p><h2 id="下载-amp-安装"><a href="#下载-amp-安装" class="headerlink" title="下载&amp;安装"></a>下载&amp;安装</h2><p>与传统web端的安装方式不同，小程序版本的<code>echarts</code>是需要自己去其<a href="https://github.com/ecomfe/echarts-for-weixin">github仓库</a>进行下载，打开之后我们只需要将项目拉下来，然后将整个<code>ec-canvas</code>文件夹复制到项目中去即可。</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220619143150190.png" alt="image-20220619143150190" loading="lazy"></p><p>其中<code>ec-canvas</code>文件夹中包含了以下几个主要文件：</p><ul><li><code>ec-canvas.js</code>文件，用于集成<code>echarts</code>中的各种方法；</li><li><code>wx-canvas.js</code>文件，封装了<code>WxCanvas</code>类</li><li><code>echarts.js</code>文件，核心文件，底层<code>echarts</code>源码。一般该文件都会很大，我们可以使用<a href="https://echarts.apache.org/zh/builder.html">自定义构建</a>来减少文件的大小。</li></ul><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="在原生小程序中使用"><a href="#在原生小程序中使用" class="headerlink" title="在原生小程序中使用"></a>在原生小程序中使用</h3><p> 首先我们需要在<code>pages/line/index.json</code>中添加如下代码，用于引入<code>ec-canvas</code>：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"usingComponents"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"ec-canvas"</span><span class="token operator">:</span> <span class="token string">"../../ec-canvas/ec-canvas"</span> <span class="token comment">// 引入ec-canvas</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>第二步，在<code>index.wxml</code>中使用<code>ec-canvas</code>，其中 <code>ec</code> 是一个我们在 <code>index.js</code> 中定义的对象，它使得图表能够在页面加载后被初始化并设置。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chart-wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ec-canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>line-charts<span class="token punctuation">"</span></span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>line-charts<span class="token punctuation">"</span></span> <span class="token attr-name">ec</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; ec &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ec-canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>第三步，在<code>index.js</code>文件中绘制图表：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">initChart</span><span class="token punctuation">(</span><span class="token parameter">canvas<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> chart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        width<span class="token punctuation">,</span>        height    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span><span class="token function">setChart</span><span class="token punctuation">(</span>chart<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">const</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// echarts 配置项</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> chart<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        ec<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            onInit<span class="token operator">:</span> initChart        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="在Taro小程序中使用"><a href="#在Taro小程序中使用" class="headerlink" title="在Taro小程序中使用"></a>在Taro小程序中使用</h3><p>第一步，还是和之前一样，先在<code>index.config.js</code>中引入<code>ec-canvas</code>：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    navigationBarTitleText<span class="token operator">:</span> <span class="token string">'Echarts图表'</span><span class="token punctuation">,</span>    onReachBottomDistance<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    enablePullDownRefresh<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    usingComponents<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 定义需要引入的第三方组件</span>        <span class="token comment">// 1. key 值指定第三方组件名字，以小写开头</span>        <span class="token comment">// 2. value 值指定第三方组件 js 文件的相对路径</span>        <span class="token string">'ec-canvas'</span><span class="token operator">:</span> <span class="token string">'../components/ec-canvas/ec-canvas'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>第二步，在<code>index.jsx </code>中使用 <code>ec-canvas</code> （简单渲染），其中 <code>ec</code> 是一个我们在 <code>index.jsx</code> 中定义的对象，它使得图表能够在页面加载后被初始化并设置。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Taro <span class="token keyword">from</span> <span class="token string">'@tarojs/taro'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> View <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@tarojs/components'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> echarts <span class="token keyword">from</span> <span class="token string">'../components/ec-canvas/echarts.js'</span><span class="token punctuation">;</span> <span class="token comment">// 引入echarts</span> <span class="token keyword">let</span> chart <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 初始化图表</span><span class="token keyword">function</span> <span class="token function">initChart</span><span class="token punctuation">(</span><span class="token parameter">canvas<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> dpr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    chart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        width<span class="token punctuation">,</span>        height<span class="token punctuation">,</span>        devicePixelRatio<span class="token operator">:</span> dpr<span class="token punctuation">,</span> <span class="token comment">// new</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    canvas<span class="token punctuation">.</span><span class="token function">setChart</span><span class="token punctuation">(</span>chart<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ehcarts option配置项</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> chart<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Charts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span> ec <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> onInit<span class="token operator">:</span> initChart <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>View className<span class="token operator">=</span><span class="token string">"charts-wrap"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ec<span class="token operator">-</span>canvas id<span class="token operator">=</span><span class="token string">"line"</span> canvas<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"line"</span> ec<span class="token operator">=</span><span class="token punctuation">&#123;</span>ec<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>第三步，接口请求数据动态渲染图表（常用），我们需要定义一个 <code>chart</code> 对象，用于存放<code>echarts</code> 实例化后的对象，进一步做到获取动态数据。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useCallback <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Taro <span class="token keyword">from</span> <span class="token string">'@tarojs/taro'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useSelector<span class="token punctuation">,</span> useDispatch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> View <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@tarojs/components'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> echarts <span class="token keyword">from</span> <span class="token string">'../components/ec-canvas/echarts.js'</span><span class="token punctuation">;</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Charts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> chartData <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token parameter">store</span> <span class="token operator">=></span> store<span class="token punctuation">.</span>charts<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从model中获取charts数据</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>chart<span class="token punctuation">,</span> setChart<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义chart对象，用于保存echarts实例</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>ec<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> onInit<span class="token operator">:</span> initChart <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化ec对象</span>         <span class="token comment">// 初始化图表</span>    <span class="token keyword">const</span> <span class="token function-variable function">initChart</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">canvas<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> dpr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> chart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            width<span class="token punctuation">,</span>            height<span class="token punctuation">,</span>            devicePixelRatio<span class="token operator">:</span> dpr<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         canvas<span class="token punctuation">.</span><span class="token function">setChart</span><span class="token punctuation">(</span>chart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setChartData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setChart</span><span class="token punctuation">(</span>chart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chart<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>         <span class="token comment">// 对图表进行塞数据</span>    <span class="token keyword">const</span> setChartData <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> option <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            xAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                type<span class="token operator">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>                data<span class="token operator">:</span> data<span class="token operator">?.</span>xAxisData            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            yAxis<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                type<span class="token operator">:</span> <span class="token string">'value'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            series<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                data<span class="token operator">:</span> data<span class="token operator">?.</span>data<span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">'line'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chart<span class="token punctuation">)</span> chart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>chart<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 初始化加载数据并渲染图表</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chart<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">setChartData</span><span class="token punctuation">(</span>chartData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>chart<span class="token punctuation">,</span> chartData<span class="token punctuation">,</span> setChartData<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 切换数据</span>    <span class="token function-variable function">switchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            type<span class="token operator">:</span> <span class="token string">'xxx/getOilTankCharts'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span><span class="token operator">></span>            <span class="token operator">&lt;</span>View onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>switchData<span class="token punctuation">&#125;</span><span class="token operator">></span>切换数据<span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>            <span class="token operator">&lt;</span>View className<span class="token operator">=</span><span class="token string">"charts-wrap"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>ec<span class="token operator">-</span>canvas id<span class="token operator">=</span><span class="token string">"line"</span> canvas<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"line"</span> ec<span class="token operator">=</span><span class="token punctuation">&#123;</span>ec<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>以上就是在<code>taro</code>小程序中使用<code>echarts</code>的正确打开方式。但是，新的问题来了，那就是因为<code>echarts</code>的包很大，导致我们小程序就会超出2M的限制。接下来我们介绍分包。</p><h2 id="Taro分包"><a href="#Taro分包" class="headerlink" title="Taro分包"></a>Taro分包</h2><pre><code>     说到小程序分包，大家应该都不陌生了，具体分包方法点击[这里](https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/basic.html)查看。在了解分包之前，我还是先说说我遇到的问题吧，场景是这样的，我引入了`echarts`的包，并且也利用分包分了一个油箱模型库的包，当只有一个页面引用`echarts`的时候，`taro`就会将`echarts`分到分到油箱模型库的包内，但是如果有两个及两个页面以上用到了`echarts`，`taro`就会将`echarts`打到主包内，依然导致主包体积超过2M的情况。一开始我以为是我分包的问题，直到我看见了这个：</code></pre><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220619143721820.png" alt="image-20220619143721820" loading="lazy"></p><p>原来是<code>Taro</code>打包机制的问题。所以只有再去官网找文档了，最终找到了思路，<code>Taro</code>支持自定义 <code>Webpack</code> 配置——<a href="https://taro-docs.jd.com/taro/docs/config-detail#miniwebpackchain">webpackChain</a>。大致思路如下：</p><ol><li>利用<code>webpack</code>中的打包机制，将<code>echarts</code>单独打包；</li><li>打包过后在对应页面注入依赖——<a href="https://taro-docs.jd.com/taro/docs/config-detail#miniaddchunkpages">addChunkPages</a>。</li></ol><p>config/index.js 的配置如下：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// ...其他配置</span>mini<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">webpackChain</span><span class="token punctuation">(</span><span class="token parameter">chain<span class="token punctuation">,</span> webpack</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> config <span class="token operator">=</span> chain<span class="token punctuation">.</span>optimization<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'splitChunks'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span>optimization<span class="token punctuation">.</span><span class="token function">splitChunks</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token operator">...</span>config<span class="token punctuation">,</span>            cacheGroups<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token operator">...</span>config<span class="token punctuation">.</span>cacheGroups<span class="token punctuation">,</span>                <span class="token punctuation">[</span>EchartsChunkName<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    name<span class="token operator">:</span> EchartsChunkName<span class="token punctuation">,</span>                    priority<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>                    <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token parameter">module</span> <span class="token operator">=></span>                        <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">charts[\\/]components[\\/]ec-canvas[\\/]echarts.js</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>resource<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">addChunkPages</span><span class="token punctuation">(</span><span class="token parameter">pages</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 相当于注册用到echarts的页面</span>        pages<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'charts/oilTankAdd/index/index'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>EchartsChunkName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pages<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'charts/oilTankDetail/index/index'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>EchartsChunkName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pages<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'charts/oilTankEdit/index/index'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>EchartsChunkName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">commonChunks</span><span class="token punctuation">(</span><span class="token parameter">commonChunks</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> commonChunks<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><p>如果按照上面的代码其实就已经完成，但是会出现一个让人很恶心的问题，那就是<code>ec-canvas</code>组件找不到<code>echarts</code>模块依赖。如下图所示，图片摘自网络</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220619143824904.png" alt="image-20220619143824904" loading="lazy"></p><p>所以这个时候 就需要我们干一件大事——改源码！！！需要我们手动去引用echarts，但是这种就需要我们每次打包过后都要去手动引用，就特别的那啥！所以我们需要再添加一个配置，让他自动引用——<code>webpack.BannerPlugin</code>，具体配置如下：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">webpackChain</span><span class="token punctuation">(</span><span class="token parameter">chain<span class="token punctuation">,</span> webpack</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> config <span class="token operator">=</span> chain<span class="token punctuation">.</span>optimization<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'splitChunks'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chain<span class="token punctuation">.</span>optimization<span class="token punctuation">.</span><span class="token function">splitChunks</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>config<span class="token punctuation">,</span>        cacheGroups<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token operator">...</span>config<span class="token punctuation">.</span>cacheGroups<span class="token punctuation">,</span>            <span class="token punctuation">[</span>EchartsChunkName<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> EchartsChunkName<span class="token punctuation">,</span>                priority<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>                <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token parameter">module</span> <span class="token operator">=></span>                        <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">charts[\\/]components[\\/]ec-canvas[\\/]echarts.js</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>resource<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 添加如下配置即可</span>    chain<span class="token punctuation">.</span><span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">'banner'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            banner<span class="token operator">:</span> <span class="token string">"require('../../echarts');"</span><span class="token punctuation">,</span>            raw<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            include<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">charts[\\/]components[\\/]ec-canvas[\\/]ec-canvas.js</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 这里写你自己项目对应的文件</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><p>这样就大功告成了！</p><p>分包前依赖分析：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220619143916174.png" alt="image-20220619143916174" loading="lazy"></p><p>分包后依赖分析：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20220619143939518.png" alt="image-20220619143939518" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Taro </category>
          
          <category> Echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>都2021年了，你还不会Redux？</title>
      <link href="2021/04/08/react-redux/"/>
      <url>2021/04/08/react-redux/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210408160440589.png" alt="image-20210408160440589"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    学习或使用过<code>react</code>的同学对<code>redux</code>肯定多多少少有点了解，今天我就结合我目前公司的可视化BI项目来重新复习一下<code>redux</code>，因为我们这个项目目前的技术栈主要是<code>React + TypeScript + React-Hooks + React-redux + Redux-thunk + Ant-Design</code>，而且内部功能逻辑复杂，所以肯定不会很详细的解释，只会挑出一些比较容易理解以及比较值得学习的地方来着重说一下，那么话不多说开始吧。</p><h2 id="Redux简介"><a href="#Redux简介" class="headerlink" title="Redux简介"></a>Redux简介</h2><p>相信大家已经对redux已经并不陌生了，官网对<code>redux</code>的定义为：</p><blockquote><p><code>Redux</code> 是 <code>JavaScript</code> 状态容器，提供可预测化的状态管理。</p></blockquote><p>那我们为什么要用<code>redux</code>呢？两个方面概括：第一，当一个<code>React</code>组件内部的状态太过于复杂时，对组件的性能以及可复用性将会变得很差，这个时候我们需要将这些状态统一放到一个公共的仓库下进行管理，这样组件内部的逻辑也不会特别复杂，而且可用性将会提高很多；第二，我们在日常开发中，必不可少的需要组件之间的传值，显得很臃肿，如果我们将所有的数据集中放到一个地方去管理，就无需我们再去一层一层传值了。如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210408154516247.png" alt="image-20210408154516247"></p><p>当我们未使用<code>redux</code>时，当绿色的组件状态发生了变化时，如果我们想更新顶层组件，我们需要经过一层又一层的传值才能达到我们想要的目的。</p><p>当我们使用<code>redux</code>时，我们可以创建一个新的类似仓库一样的<code>Store</code>模块，将所有的数据都放到<code>store</code>中，如果绿色的组件更新了状态，这个时候会派发一个更新操作到<code>store</code>中，去更新数据，然后我们在其他组件享用到这个数据时，只需从<code>store</code>中获取即可，大大的节省了代码量以及性能。</p><h2 id="Redux的基础使用"><a href="#Redux的基础使用" class="headerlink" title="Redux的基础使用"></a>Redux的基础使用</h2><p>别的我们先不多说，直接上张图，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210408170614982.png" alt="image-20210408170614982"></p><p>对于<code>redux</code>老玩家来说，这张图可能再熟悉不过了，但对于那些还停留在打人机地步的同学会满脸黑人问号，这**是个啥？别着急，我们来一步一步说明：</p><p>这其实就是我们<code>redux</code>数据流向，说白了，就是把我们的数据怎么一步一步存到<code>redux</code>中，并且如何更新，如果获取<code>redux</code>中的值的。其实看懂这个图并不复杂，我们只需要理解怎么去往<code>redux</code>中去塞值（更新<code>redux</code>的数据）,我们可以结合日常生活中的你去图书馆借书的流程即可。</p><p>假设我们现在要去图书馆借一本武侠小说，我们肯定要和图书馆管理员说，我们要借什么书，然而呢图书馆里面的书肯定很多，管理员也不可能每一本都记得很清楚，他就需要去借助其他工具（小手册，电脑）来帮我们查找这本书在哪，找到书之后，图书馆管理员才能把书拿给你。对比这个日常生活的例子，我们就可以很轻松地理解这张图了。</p><p>最下面的<code>ReactComponents</code>就是我们自己，接下来来到了代码中的<code>actionCreators</code>，我们可以把这个当作我们对图书馆管理员说的话：”我要借一本武侠小说“，那么这句话就从<code>actionCreators</code>中出来变成了<code>action</code>，通过声音的传播将我要什么书的信息（数据）传到了管理员的耳朵里（<code>Store</code>），但是呢，图书管的书实在有太多太多，管理员也不知道我们要的书在哪，所以他就要借助其他工具（<code>Reducers</code>）来去帮我们查找相关书籍的信息，通过工具查找后，工具会图书馆管理员一个信息，告知管理员这个书是在几楼那个位置，这个时候图书馆管理员去这个位置拿到小说之后，就会把书那给你。这个就是<code>redux</code>数据流向和日常生活中的例子结和起来了。接下来我们再用代码的方式来描述一下。</p><p>首先对于<code>Components</code>组件来说，必不可免的会有数据的产生，那么在组件去拿<code>redux</code>中的数据，其实很简单，主要是复杂在更新<code>redux</code>中的数据，首先我们要通过<code>actionCreators</code>去生成一个<code>action</code>，那么<code>action</code>是什么呢？</p><blockquote><p><code>Action</code>就是一个普通对象，其内必须使用一个字符串类型的<code>type</code> 字段来表示将要执行的动作。</p></blockquote><p>生成<code>action</code>之后，通过<code>redux</code>提供的<code>dispatch()</code> 方法将<code>action</code>传递到<code>store</code>，并由<code>store</code>传到<code>reducers</code>中，由<code>reducers</code>统一处理之后返回一个新的状态更新到<code>store</code>中去。这就是一个完整的<code>redux</code>数据流向。</p><p>接下来我们通过简单的小案例——<code>todolist</code>来熟悉一下整个<code>redux</code>是如何使用的吧！</p><p>首先，我们先安装官方提供的脚手架——<code>create-react-app</code>，当然了，你想自己手动搭一个也可以（手动狗头）。</p><h3 id="安装create-react-app"><a href="#安装create-react-app" class="headerlink" title="安装create-react-app"></a>安装<code>create-react-app</code></h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ npx create-react-app todolist</code></pre><p>然后我们进入项目并启动。</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> todolist$ <span class="token function">yarn</span> start</code></pre><h3 id="实现简易版的todolist"><a href="#实现简易版的todolist" class="headerlink" title="实现简易版的todolist"></a>实现简易版的todolist</h3><p>为了等一下布局方面，我们直接采用蚂蚁金服的<code>antd UI</code> 库，安装过程就不说了，照着官网的一步一步配置就可以了；</p><p>接下来，我们先用传统的<code>class</code>方式实现一下<code>todolist</code>，代码如下就不一一解释了，相信大家都能看懂：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Input<span class="token punctuation">,</span> Button<span class="token punctuation">,</span> List <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      inputValue<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>   <span class="token function-variable function">onChange</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> inputValue<span class="token operator">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">addTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> list<span class="token punctuation">,</span> inputValue <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputValue<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> list<span class="token punctuation">,</span> inputValue<span class="token operator">:</span> <span class="token string">''</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">deleteTodo</span> <span class="token operator">=</span> <span class="token parameter">index</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> list <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> list <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> inputValue<span class="token punctuation">,</span> list <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add-todo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span>             <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>输入内容<span class="token punctuation">"</span></span>            <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">&#125;</span></span>            <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>inputValue<span class="token punctuation">&#125;</span></span>          <span class="token punctuation">/></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>addTodo<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">提交</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">List</span></span>              <span class="token attr-name">bordered</span>              <span class="token attr-name">dataSource</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>list<span class="token punctuation">&#125;</span></span>              <span class="token attr-name">renderItem</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">List.Item</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteTodo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">List.Item</span></span><span class="token punctuation">></span></span>              <span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>            <span class="token punctuation">/></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><p>具体布局如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210409141033132.png" alt="image-20210409141033132"></p><h3 id="安装redux"><a href="#安装redux" class="headerlink" title="安装redux"></a>安装<code>redux</code></h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> redux -S</code></pre><h3 id="使用redux"><a href="#使用redux" class="headerlink" title="使用redux"></a>使用<code>redux</code></h3><p>我们在根目录下新建一个<code>store</code>文件夹，新建<code>index.js</code>文件，写入：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其次，我们现在已经有了图书馆管理员，那还需要给这个图书馆搭配一个工具<code>Reducers</code>，在当前目录下新建<code>reducer.js</code>文件：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> initValue <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    inputValue<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// store的默认值</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initValue<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> state<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这时，我们需要将我们的<code>store</code>和<code>reducer</code>结合起来，为了更直观地看到我们地数据流向，我们需要在Chrome网上应用店搜索安装<code>redux-devtools</code>插件，如果你的浏览器插件栏有这个图标就代表安装成功了：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210409151643949.png" alt="image-20210409151643949"></p><p>我们需要在<code>createStore</code>方法中的第二个参数中传入<code>window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()</code>语句；</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createStore <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducer'</span><span class="token punctuation">;</span><span class="token keyword">const</span> devTools <span class="token operator">=</span> window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION__ <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> devTools<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>此时打开我们的控制台就会有一个<code>Redux</code>的标签栏，打开之后就是这个样子：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210409152000782.png" alt="image-20210409152000782"></p><p>这样，我们一个简易仓库就搭建好了，接下来的时间就是将我们<code>todolist</code>和<code>redux</code>结合使用了</p><p>我们在<code>App.js</code>中引入我们创建好的<code>store</code>：</p><pre class="language-diff" data-language="diff"><code class="language-diff">// app.js<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import store from './store';</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> this.state = &#123;</span><span class="token prefix deleted">-</span><span class="token line">inputValue: '',</span><span class="token prefix deleted">-</span><span class="token line">   list: ['1', '2']</span><span class="token prefix deleted">-</span><span class="token line"> &#125;;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> this.state = store.getState(); // 该方法是用于获取store中的默认值，也就是reducer里定义的默认值</span></span></code></pre><p>我们就可以获取到<code>redux</code>中的数据了，接下来我们就是需要去更改<code>redux</code>中的数据了，大家还记得我们的流程嘛？先有<code>action</code>然后通过<code>store</code>的<code>dispatch()</code>到<code>reducer</code>中，让<code>reducer</code>处理数据之后，再返回给组件。</p><pre class="language-diff" data-language="diff"><code class="language-diff">// app.js<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> onChange = e => &#123;</span><span class="token prefix deleted">-</span><span class="token line">   this.setState(&#123; inputValue: e.target.value &#125;);</span><span class="token prefix deleted">-</span><span class="token line"> &#125;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> onChange = e => &#123;</span><span class="token prefix inserted">+</span><span class="token line">const action = &#123; type: 'change_input_value', payload: e.target.value &#125;;</span><span class="token prefix inserted">+</span><span class="token line">store.dispatch(action);</span><span class="token prefix inserted">+</span><span class="token line"> &#125;</span></span></code></pre><p>这样我们的数据就被派发到了<code>reducer</code>中，在<code>reducer</code>中进行处理，<code>reducer</code>其实就是一个纯函数函数，所谓的纯函数就是输入与输出结果一样，其接收两个参数<code>state</code>和<code>action</code>，<code>state</code>就是当前在<code>store</code>中的存储的状态值，而<code>action</code>就是从<code>dispatch()</code>方法派发过来的，这里我们需要注意：</p><blockquote><p><code>reducer</code>中我们绝对不能修改原有的<code>state</code>！！！</p></blockquote><p>所以我们这里先选择一个比较简单的深拷贝方式：<code>JSON.parse(JSON.stringify(data))</code>，当然这种方式有点弊端，我们暂且先用着，后面我们讲借助一个第三方库来更优雅地去处理这个问题。</p><pre class="language-diff" data-language="diff"><code class="language-diff">// reducer.jsexport default (state = initValue, action) => &#123;<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> return state;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> switch(action.type) &#123;</span><span class="token prefix inserted">+</span><span class="token line"> case 'change_input_value':</span><span class="token prefix inserted">+</span><span class="token line"> const newState = JSON.parse(JSON.stringify(state));</span><span class="token prefix inserted">+</span><span class="token line">newState.inputValue = action.payload;</span><span class="token prefix inserted">+</span><span class="token line">return newState; // 切记一定要将新的state返回出去</span><span class="token prefix inserted">+</span><span class="token line"> default :</span><span class="token prefix inserted">+</span><span class="token line">   return state;</span><span class="token prefix inserted">+</span><span class="token line"> &#125;</span></span>&#125;</code></pre><p>这个时候当我们在输入框输入时，我们可以仔细观察一下<code>devtools</code>工具，发现其内部的数据在不停的变化，但是，在页面上并没有任何变化，输入框内输入不上值：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210409153736150.png" alt="image-20210409153736150"></p><p>这是因为，我们只是更改了<code>store</code>里面的数据，但是页面上面并不知道我们更改了数据，所以我们就用到了<code>store</code>的第三个方法：<code>store.subscribe()</code>，该方法接收一个回调函数，当<code>dispatch action</code>的时候就会执行这个函数，我们可以使用这个函数来监听数据的变化从而达到更新数据的效果。</p><pre class="language-diff" data-language="diff"><code class="language-diff">// app.jsthis.state = store.getState(); // 该方法是用于获取store中的默认值，也就是reducer里定义的默认值<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> store.subscribe(this.handleSubscribe);</span><span class="token prefix inserted">+</span><span class="token line"> handleSubscribe = () => &#123;</span><span class="token prefix inserted">+</span><span class="token line">    this.setState(store.getState())</span><span class="token prefix inserted">+</span><span class="token line"> &#125;</span></span></code></pre><p>这时，我们看一下<code>devtools</code>里的数据也发生了变化，并且输入框就可以输入了，达到了我们的目的。</p><p>接下来我们完成第二个功能，点击按钮新增，我们需要在按钮上绑定一个<code>onClick</code>事件，同样走一遍刚才的流程，先派发<code>action</code>到<code>reducer</code>，再经过<code>reducer</code>处理之后返回给<code>store</code>，最后有组件拿到值:</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Button</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>addToto<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">提交</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token function-variable function">addToto</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">'add_todo'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// reducer.js</span><span class="token keyword">let</span> initialValue <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    inputValue<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initialValue<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> newState <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">'change_input_value'</span><span class="token operator">:</span>            newState<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>            <span class="token keyword">return</span> newState<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'add_todo'</span><span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newState<span class="token punctuation">.</span>inputValue<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>            newState<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newState<span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            newState<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> newState<span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>             <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这样大致走了两遍流程之后，应该都了解得差不多了，删除功能和这些类似，只不过<code>action</code>中得<code>payload</code>需要传递一个索引值<code>index</code>，具体代码在这里就不写了，感兴趣的可以自己试一下。说了这么多，大家有没有发现一个不太友好的地方，没错，就是<code>action</code>，每次都需要手动的创建一个<code>action</code>，确实挺麻烦的，我们可以将这些<code>action</code>统一的放到一个文件中，然后需要的时候就从这个文件中引入即可，于是，我们在<code>store</code>目录中新创建一个<code>actionCreators.js</code>文件，里面用于保存这些<code>action</code>， 但是我们很快就能发现新的问题，有些<code>action</code>是需要进行传值的，所以我们直接采用函数的方式去返回<code>action</code>：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// actionCreators.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">changeInputValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   type<span class="token operator">:</span> <span class="token string">'change_input_value'</span><span class="token punctuation">,</span>   payload<span class="token operator">:</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">addTodoItem</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> <span class="token string">'add_todo_item'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>那在派发<code>action</code>的地方我们可以直接先引入<code>actionCreators.js</code>:</p><pre class="language-diff" data-language="diff"><code class="language-diff">// app.jsimport * as actionCreators from './store/actionCreators';onChange = e => &#123;<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> const action = &#123;</span><span class="token prefix deleted">-</span><span class="token line">type: 'change_input_value',</span><span class="token prefix deleted">-</span><span class="token line">payload: e.target.value</span><span class="token prefix deleted">-</span><span class="token line"> &#125;;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> store.dispatch(actionCreators.changeInputValue(e.target.value));</span></span>&#125;addTodo = () => &#123;<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> const action = &#123;</span><span class="token prefix deleted">-</span><span class="token line">type: 'add_todo_item'</span><span class="token prefix deleted">-</span><span class="token line"> &#125;;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   store.dispatch(actionCreators.addTodoItem());</span></span>&#125;</code></pre><p>不知道大家有没有发现，其实这么写还是有一点点缺陷的，缺陷在于如果我们把<code>type</code>这个字符串不小心拼写错误的话，我们在<code>reducer</code>中就不会做出任何反应，如果出问题的话，我们可能不能及时发现错误，所以我们在这里可以新建一个<code>constants.js</code>文件，用于存储<code>type</code>字符串的常量值：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// constants.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">CHANGE_INPUT_VALUE</span> <span class="token operator">=</span> <span class="token string">'change_input_value'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">ADD_TODO_ITEM</span> <span class="token operator">=</span> <span class="token string">'add_todo_item'</span><span class="token punctuation">;</span></code></pre><p>于此同时，我们需要更改<code>actionCreators.js</code>文件和<code>reducer.js</code>文件：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// actionCreators.js</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> contants <span class="token keyword">from</span> <span class="token string">'./constants'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">changeInputValue</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>   type<span class="token operator">:</span> contants<span class="token punctuation">.</span><span class="token constant">CHANGE_INPUT_VALUE</span><span class="token punctuation">,</span>   payload<span class="token operator">:</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">addTodoItem</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> contants<span class="token punctuation">.</span><span class="token constant">ADD_TODO_ITEM</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// reducer.js</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> contants <span class="token keyword">from</span> <span class="token string">'./constants'</span><span class="token punctuation">;</span><span class="token keyword">let</span> initialValue <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    inputValue<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initialValue<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> newState <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> contants<span class="token punctuation">.</span><span class="token constant">CHANGE_INPUT_VALUE</span><span class="token operator">:</span>            newState<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>            <span class="token keyword">return</span> newState<span class="token punctuation">;</span>        <span class="token keyword">case</span> contants<span class="token punctuation">.</span><span class="token constant">ADD_TODO_ITEM</span><span class="token operator">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newState<span class="token punctuation">.</span>inputValue<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>            newState<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newState<span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            newState<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> newState<span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>             <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这样我们就不会因为我们拼写的错误导致长时间定位不到问题在哪个位置了。完美！到此<code>redux</code>就到此结束了，肯定有不足的地方，我也会继续去改进这些地方。接下来我们就要去了解<code>react-redux</code>的使用方式了，<code>redux</code>和<code>react-redux</code>多多少少还是有点区别的（个人理解），接下来进入正题吧！</p><h2 id="React-Redux的使用"><a href="#React-Redux的使用" class="headerlink" title="React-Redux的使用"></a>React-Redux的使用</h2><p>上述我们了解了<code>redux</code>的基本使用以及利用<code>redux</code>做了一个简单的<code>todolist</code>，当然了，<code>redux</code>不仅可以在<code>react</code>中使用，你可以在<code>vue</code>、<code>jq</code>等其他框架里去使用，我们接下来介绍的<code>react-redux</code>是相当于专门为<code>react</code>封装了一个<code>redux</code>，话不多说，先安装再来了解相关的<code>api</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> react-redux --save-dev</code></pre><h3 id="api——Provider"><a href="#api——Provider" class="headerlink" title="api——Provider"></a>api——Provider</h3><p><code>Provider</code>是一个组件，其实很好理解，通俗来说就是你想让哪些组件使用<code>react-redux</code>里面的数据，一般来说，我们都会放到根组件外部，让其包裹根组件，它需要传递一个<code>store</code>参数，这个也很好理解，就是将我们的<code>store</code>仓库传递给这个参数即可。那么我们如何使用呢？</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>store<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><h3 id="api——connect-mapStateToProps-mapDispatchToProps-mergeProps-options"><a href="#api——connect-mapStateToProps-mapDispatchToProps-mergeProps-options" class="headerlink" title="api——connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])"></a>api——connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</h3><p>要说<code>redux</code>和<code>react-redux</code>最大的区别，我认为应该就是这个<code>connect()</code>方法了，这个方法使用于将我们当前的组件和<code>react-redux</code>做一个连接，让彼此可以相互传递数据，这个操作并不会改变原来的组件类，而是返回一个新的并且与<code>redux store</code>做好连接的组件类，其内部原理就是我们<code>react</code>中的高阶组件，由于本文章以会使用为目的，在这里我们就不细说了。</p><h4 id="mapStateToProps-state-ownProps-stateProps-Function"><a href="#mapStateToProps-state-ownProps-stateProps-Function" class="headerlink" title="[mapStateToProps(state, [ownProps]): stateProps] (Function):"></a>[<code>mapStateToProps(state, [ownProps]): stateProps</code>] (<em>Function</em>):</h4><p><code>mapStateToProps</code>是一个回调函数，如果我们调用了这个<code>connect</code>方法并且传入了<code>mapStateToProps</code>这个参数，该组件就会监听<code>store</code>中数据的变化，不管任何情况，只要<code>store</code>里面的数据发生了变化，那么该函数就会被执行一次，这个函数的返回值必须是一个纯对象，这个对象将会和<code>props</code>进行一个合并，如果你省略了这个参数，你的组件将不会监听 <code>Redux store</code>。如果指定了该回调函数中的第二个参数 <code>ownProps</code>，则该参数的值为传递到组件的 <code>props</code>，而且只要组件接收到新的 <code>props</code>，<code>mapStateToProps</code> 也会被调用。说了这么多，我们用一段通俗易懂的话来概括一下：</p><blockquote><p><code>mapStateToProps</code>是用来筛选<code>store</code>中的数据，并且将需要的数据注入到当前的<code>props</code>中。</p></blockquote><h4 id="mapDispatchToProps-dispatch-ownProps-dispatchProps-Object-or-Function"><a href="#mapDispatchToProps-dispatch-ownProps-dispatchProps-Object-or-Function" class="headerlink" title="[mapDispatchToProps(dispatch, [ownProps]): dispatchProps] (Object or Function):"></a>[<code>mapDispatchToProps(dispatch, [ownProps]): dispatchProps</code>] (<em>Object</em> or <em>Function</em>):</h4><p><code>mapDispatchToProps</code>同样也是一个回调函数，如果传递的是一个对象，那么每个定义在该对象的函数都将被当作 Redux action creator，对象所定义的方法名将作为属性名；每个方法将返回一个新的函数，函数中<code>dispatch</code>方法会将<code>action creator</code>的返回值作为参数执行。这些属性会被合并到组件的 <code>props</code> 中。概括一下：</p><blockquote><p><code>mapDispatchToProps</code>充当的是<code>actionCreators</code>的角色，将<code>action</code>派发到<code>reducer</code>中，并将这个动作派发给当前组件<code>props</code>中。</p></blockquote><h4 id="mergeProps-stateProps-dispatchProps-ownProps-props-Function"><a href="#mergeProps-stateProps-dispatchProps-ownProps-props-Function" class="headerlink" title="[mergeProps(stateProps, dispatchProps, ownProps): props] (Function):"></a>[<code>mergeProps(stateProps, dispatchProps, ownProps): props</code>] (<em>Function</em>):</h4><p>如果指定了这个参数，<code>mapStateToProps()</code> 与 <code>mapDispatchToProps()</code> 的执行结果和组件自身的 <code>props</code> 将传入到这个回调函数中。该回调函数返回的对象将作为 <code>props</code> 传递到被包装的组件中。你也许可以用这个回调函数，根据组件的 <code>props</code> 来筛选部分的 <code>state</code> 数据，或者把 <code>props</code> 中的某个特定变量与 <code>action creator</code> 绑定在一起。如果你省略这个参数，默认情况下返回 <code>Object.assign(&#123;&#125;, ownProps, stateProps, dispatchProps)</code> 的结果。</p><h4 id="options-Object"><a href="#options-Object" class="headerlink" title="[options] (Object) :"></a>[<code>options</code>] <em>(Object)</em> :</h4><p>如果指定这个参数，可以定制 <code>connector</code> 的行为。</p><ul><li>[<code>pure = true</code>] <em>(Boolean)</em>: 如果为 <code>true</code>，<code>connector</code> 将执行 <code>shouldComponentUpdate</code> 并且浅对比 <code>mergeProps</code> 的结果，避免不必要的更新，前提是当前组件是一个“纯”组件，它不依赖于任何的输入或 <code>state</code> 而只依赖于 <code>props</code> 和 Redux store 的 <code>state</code>。<em>默认值为 <code>true</code>。</em></li><li>[<code>withRef = false</code>] <em>(Boolean)</em>: 如果为 <code>true</code>，<code>connector</code> 会保存一个对被包装组件实例的引用，该引用通过 <code>getWrappedInstance()</code> 方法获得。<em>默认值为 <code>false</code>。</em></li></ul><p>在我们日常开发中，我们一般只会使用到前两个参数<code>mapStateToProps</code>和<code>mapDispatchToProps</code>，我们来通过我们上面写的<code>todolist</code>的例子来看些这个到底怎么用</p><p>首先我们需要在根组件中导入<code>Provider</code>并且提供<code>store</code>：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 项目入口根目录</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Provider <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>store<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后我们清除一下上面使用<code>redux</code>遗留的代码，直接引入<code>connect</code>方法：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> connect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> actionCreators <span class="token keyword">from</span> <span class="token string">'./store/actionCreators'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   <span class="token function-variable function">onChange</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">addTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> inputValue<span class="token punctuation">,</span> list <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add-todo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>             <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>输入内容<span class="token punctuation">"</span></span>            <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">&#125;</span></span>            <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>inputValue<span class="token punctuation">&#125;</span></span>          <span class="token punctuation">/></span></span><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>addTodo<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">提交</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">          </span><span class="token punctuation">&#123;</span>            list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  inputValue<span class="token operator">:</span> state<span class="token punctuation">.</span>inputValue<span class="token punctuation">,</span>  list<span class="token operator">:</span> state<span class="token punctuation">.</span>list<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span>actionCreators<span class="token punctuation">.</span><span class="token function">changeInputValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span>actionCreators<span class="token punctuation">.</span><span class="token function">addTodoItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由上面的代码我们看到<code>mapStateToProps</code>和<code>mapDispatch</code>方法的使用：</p><p>前者将<code>store</code>中的数据筛选到了该组件的<code>props</code>中，供组件内部使用；</p><p>后者相当于把派发<code>action</code>到<code>store</code>这个过程封装成了一个放在<code>props</code>中的函数，当我们点击提交按钮时，就会直接帮我们派发这个<code>action</code>。我们只要在找到<code>props</code>里的这个函数，然后直接调用即可。有了上面<code>redux</code>的基础，这一块是不是很快就能轻松地理解了呢？</p><h2 id="使用Redux-thunk派发异步Action"><a href="#使用Redux-thunk派发异步Action" class="headerlink" title="使用Redux-thunk派发异步Action"></a>使用Redux-thunk派发异步Action</h2><h3 id="什么是redux的中间件"><a href="#什么是redux的中间件" class="headerlink" title="什么是redux的中间件"></a>什么是redux的中间件</h3><p>在了解<code>redux-thunk</code>之前，我们先来看看<code>redux</code>的中间件，很多同学在初期了解中间件的时候总喜欢说<code>react</code>的中间件，包括我现在的一些同事也会说<code>react</code>的中间件，这个是不对的。那么什么是<code>redux</code>的中间件呢？我们可以理解为它是一个工厂，会将我们当前的<code>action</code>做出相应的处理然后再去交给<code>reducer</code>进行进一步的处理。那么我们日常开发中一般会将请求数据的部分放到这个工厂内部进行处理，通过处理之后将拿到的数据再次的通过<code>reducer</code>进行数据的更新。如下图所示：</p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/redux-thunk.gif" alt="redux-middleware" /><p>由上图gif我们可以清楚的看到<code>redux</code>的数据流向以及中间件的工作机制。上述View层触发了一个事件（<code>event</code>）然后到<code>actions</code>中，通过<code>actionCreators</code>创建了一个<code>action</code>，如果我们不适用中间件的情况，那么这个<code>action</code>将会被直接派发到<code>reducer</code>中进行数据的更新等操作。但是有了中间件之后，我们不难发现，由<code>actionCreators</code>创建的<code>action</code>并没有直接到达<code>reducer</code>中，而是通过中间件去进行数据的处理（调用数据接口），然后将获取到的数据通过中间件的<code>dispatcher</code>模块再次派发到<code>reducer</code>中进行数据的更新。</p><h3 id="redux-thunk使用"><a href="#redux-thunk使用" class="headerlink" title="redux-thunk使用"></a>redux-thunk使用</h3><p>想要使用<code>redux-thunk</code>，那肯定是先要安装了：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> redux-thunk -S</code></pre><p>安装成功后，我们需要更改一下<code>store/index.js</code>，我们需要将<code>redux-thunk</code>引入：</p><pre class="language-diff" data-language="diff"><code class="language-diff">import reducer from './reducer';<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> import &#123; createStore &#125; from 'redux';</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import &#123; createStore, compose, applyMiddleware &#125; from 'redux';</span><span class="token prefix inserted">+</span><span class="token line"> import thunk from 'redux-thunk';</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> const devTools = window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__();</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> export default const store = createStore(reducer, devTools);</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const store = createStore(reducer, composeEnhancers(</span><span class="token prefix inserted">+</span><span class="token line">applyMiddleware(thunk)</span><span class="token prefix inserted">+</span><span class="token line"> ));</span></span></code></pre><p>现在我们还是借助上面的<code>todolist</code>，一起来过一下<code>redux-thunk</code>的使用方式，现在有这样的场景，需要拿到之前保存过的<code>todo-item</code>，这里就需要去请求数据接口了，为了方便这里就直接使用<code>axios</code>，不进行一层封装了，主要的目的是学习如何使用</p><p>首先安装一下<code>axios</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> axios -S </code></pre><p>还记得上面我们用的<code>actionCreators</code>文件以及那张<code>redux</code>中间件的运行机制吗？我们直接上代码：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// actionCreators</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> constants <span class="token keyword">from</span> <span class="token string">'./constants'</span><span class="token function-variable function">getPreviousTodoItemsActions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> constants<span class="token punctuation">.</span><span class="token constant">GET_PREVIOUS_TODO_ITEM</span><span class="token punctuation">,</span>    payload<span class="token operator">:</span> list<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getPreviousTodoItems</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/api/todo.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> result <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">getPreviousTodoItemsActions</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>上面代码多多少少看着有点懵逼，我们来解释一下，我们暴露了一个名称为<code>getPreviousTodoItems</code>的方法，如果我们没有使用<code>thunk</code>之前，我们这里肯定返回的是一个对象，也就是<code>action</code>，但是我们使用了<code>thunk</code>之后，这里就变成了返回一个函数，该函数接受一个<code>dispatch</code>函数，那么在这个函数内部我们就可以进行接口数据的请求，然后拿到数据之后，我们还是通过函数的方式动态的创建一个<code>action</code>，将这个<code>action</code>通过回调函数的参数<code>dispatch</code>去派发给<code>reducer</code>，再由<code>reducer</code>进行数据更新。我们在<code>app.js</code>中调用：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// import React, &#123; Component &#125; from 'react';</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> connect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> actionCreators <span class="token keyword">from</span> <span class="token string">'./store/actionCreators'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">getTodoItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">onChange</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function-variable function">addTodo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> inputValue<span class="token punctuation">,</span> list <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token operator">...</span>html    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  inputValue<span class="token operator">:</span> state<span class="token punctuation">.</span>inputValue<span class="token punctuation">,</span>  list<span class="token operator">:</span> state<span class="token punctuation">.</span>list<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dispatch</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">getTodoItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span>actionCreators<span class="token punctuation">.</span><span class="token function">getPreviousTodoItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span>actionCreators<span class="token punctuation">.</span><span class="token function">changeInputValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span>actionCreators<span class="token punctuation">.</span><span class="token function">addTodoItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样我们就完成了一个数据请求。在<code>mapDispatchToProps</code>中添加<code>getTodoItem</code>方法，然后再<code>componentDidMount</code>（或者<code>Hooks</code>中的<code>useEffect</code>）中调用即可。</p><p>但是有的同学可能会说，这样会将<code>actionCreators</code>和请求混再一起，能不能分开，这样看着会舒服点，如果你有这种想法的话，建议看一下<a href="https://github.com/redux-saga/redux-saga#readme">redux-saga</a>，这也是一个<code>redux</code>的中间件，它会将数据请求和<code>action</code>分开，感兴趣的小伙伴可以看看。</p><h2 id="可视化BI项目中值得学习相关的库"><a href="#可视化BI项目中值得学习相关的库" class="headerlink" title="可视化BI项目中值得学习相关的库"></a>可视化BI项目中值得学习相关的库</h2><h3 id="immer——提高性能的神器"><a href="#immer——提高性能的神器" class="headerlink" title="immer——提高性能的神器"></a>immer——提高性能的神器</h3><p>相信大家在开发过程中肯定会遇到一些过于复杂的数据类型，例如这样的：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'indexsarrol'</span><span class="token punctuation">,</span>    sex<span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    telephone<span class="token operator">:</span> <span class="token string">'1888888888'</span><span class="token punctuation">,</span>    hobit<span class="token operator">:</span> <span class="token string">'LOL'</span><span class="token punctuation">,</span>    address<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        country<span class="token operator">:</span> <span class="token string">'China'</span><span class="token punctuation">,</span>        city<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          name<span class="token operator">:</span> <span class="token string">'Nanjing'</span><span class="token punctuation">,</span>          area<span class="token operator">:</span> <span class="token string">'Jiangning'</span><span class="token punctuation">,</span>          postcode<span class="token operator">:</span> <span class="token number">210000</span><span class="token punctuation">,</span> <span class="token comment">// 邮编号码</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>如果这些出现在<code>react</code>中的<code>state</code>时，就变成了这样：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">UserInfo</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            name<span class="token operator">:</span> <span class="token string">'indexsarrol'</span><span class="token punctuation">,</span>            sex<span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>            telephone<span class="token operator">:</span> <span class="token string">'1888888888'</span><span class="token punctuation">,</span>            hobit<span class="token operator">:</span> <span class="token string">'LOL'</span><span class="token punctuation">,</span>            address<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                country<span class="token operator">:</span> <span class="token string">'China'</span><span class="token punctuation">,</span>                city<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                  name<span class="token operator">:</span> <span class="token string">'Nanjing'</span><span class="token punctuation">,</span>                  area<span class="token operator">:</span> <span class="token string">'Jiangning'</span><span class="token punctuation">,</span>                  postcode<span class="token operator">:</span> <span class="token number">210000</span><span class="token punctuation">,</span> <span class="token comment">// 邮编号码</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果现在有一个需求时让我们修改我们的邮编号码，这个时候我们一般会这么做：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    address<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>address<span class="token punctuation">,</span>        city<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">,</span>            area<span class="token operator">:</span> <span class="token string">'Jiangning'</span><span class="token punctuation">,</span>            postcode<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">.</span>postcode <span class="token operator">+</span> <span class="token number">100</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>但是这样的写法看上去很让人很难受，写的时候也比较繁琐，有点恶心，后来我们用深拷贝把原有的对象拷贝一份，再去修改，就像这样：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> deepClone <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'utils'</span><span class="token keyword">const</span> copyUserInfo <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>copyUserInfo<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">.</span>postcode <span class="token operator">=</span> copyUserInfo<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token punctuation">.</span>postcode <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span>copyUserInfo<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>这样确实看起来清爽了很多，但还是存在了一个问题，那就是性能，如果对象过于复杂，深拷贝的性能堪忧，那么有没有什么办法能取代深拷贝的方法呢？答案是肯定的，<code>immer</code>由此而来，上图：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210412173552667.png" alt="image-20210412173552667"></p><p><em>当我们调用了<code>immer</code>中的<code>produce</code>方法时，<code>immer</code>会将当前的对象存储到<code>immer</code>内部，然后通过暴露出来一个草稿对象（<code>draft</code>），我们后续的所有的改动全部都在草稿上进行，等到我们修改结束之后再将<code>current</code>按照草稿的修改再次返回一个新的对象。</em></p><p>在我们当前做的项目中，因为<code>reducer</code>中我们不能更改当前的状态值是一个纯函数，这在上面我们也提到过，在<code>reducer</code>中采用了<code>immer</code>中的<code>produce</code>方法：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210412172142541.png" alt="image-20210412172142541"></p><p><code>produce</code>方法接受两个参数，一个当前的状态值<code>state</code>，另一个是一个回调函数，回调函数中的<code>draft</code>就是<code>immer</code>内部暴露出来的草稿，后续所有的修改全部基于草稿修改即可。</p><p>例如上面的是一个注册功能的<code>reducer</code>，在<code>reducer</code>内部将<code>produce</code>方法返回出来，这样就不需要我们用先拷贝一份对象的方式处理数据了，也极大的降低了性能的消耗。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然说了挺多，但是这些只是<code>redux</code>的一些基础用法，当然知道这些是远远不够的，后续我将会阅读部分源码再来将这些补充上去，不得不感慨一下，<code>react</code>的生态圈实在是太强大了。其实有些东西我这边说的可能不是特别准确，我也会继续更新，争取把每个小点都解释地通俗易懂。这篇文章也花了我不少时间去弄，虽然有些描述地不是很到位。但是我觉得对于入门这篇文章以及足够了。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Context跨层级传递数据以及Lazy与Suspense实现延迟加载</title>
      <link href="2021/02/02/React-Context-LazySuspense/"/>
      <url>2021/02/02/React-Context-LazySuspense/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210406153348856.png" alt="image-20210406153348856"></p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>虽然目前<code>React</code>已经更新到了第17个版本，但是丝毫不影响我今天写这个文章，因为这写东西在日常工作中还是使用的太少了，就当作笔记来记录一下吧。</p><h2 id="React-Context的使用"><a href="#React-Context的使用" class="headerlink" title="React-Context的使用"></a>React-Context的使用</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><code>Context</code>在<a href="https://react.docschina.org/docs/context.html">官方</a>的定义为：</p><blockquote><p><code>Context</code> 提供了一个无需为每层组件手动添加 <code>props</code>，就能在组件树间进行数据传递的方法。</p></blockquote><p>以上的一段话，翻译成通俗易懂的话就是：全局变量。</p><p>如果我们之前按照<code>props</code>的传值方式的话，我们可能需要传递多个组件才能在我们目标组件中使用到我们想要的值，这未免太过于复杂，而且在传递过程中，一些组件完全没有必要用到这些值，这就导致我们系统性能变差。所以我们可以使用<code>Context</code>来进行传值（当然我们可以使用<code>redux</code>或者<code>mobx</code>，但是有点太臃肿了）。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>我们先从<code>react</code>中导入<code>context</code>，这个和我们在<code>react</code>中使用<code>refs</code>一样：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> createContext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span></code></pre><p>然后创建<code>context</code>：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> NewContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里后续使用NewContext，是以组件的方式使用的</span></code></pre><p>接下来就是使用<code>context</code>了，其返回了两个组件，分别是 <code>Context.Provider</code> 组件以及<code>Context.Consumer</code>组件</p><h4 id="Context-Provider组件"><a href="#Context-Provider组件" class="headerlink" title="Context.Provider组件"></a><code>Context.Provider</code>组件</h4><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Context.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">123</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>子元素<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Context.Provider</span></span><span class="token punctuation">></span></span></code></pre><p><code>Context.Provider</code>接受一个<code>value</code>属性，可以将值传递给“子元素”。并在子元素中能够直接获取到由<code>Provider</code>传递过来的值。当然<code>Provider</code>也是可以嵌套的，只需要我们在重新创建<code>Context</code>即可。当<code>Provider</code>的<code>value</code>发生变化时，它内部的所有组件都会重新进行一次渲染。</p><blockquote><p>注意：如果我们在创建<code>Context.Provider</code>是忘记传递<code>value</code>属性的话，<code>createContext(defaultProps)</code>函数中的<code>defaultProps</code>则为默认值，目前官方并不推荐我们使用这种方式</p></blockquote><h4 id="Context-Consumer组件"><a href="#Context-Consumer组件" class="headerlink" title="Context.Consumer组件"></a><code>Context.Consumer</code>组件</h4><p>上述中，我们说到了<code>Context.Provider</code>组件是可以嵌套子元素的，那么<code>Context.Consumer</code>组件作用也就来了，在该组件中，我们可以监听到<code>Context.Provider</code>组件的value值的变更，从而更新数据进行渲染，只不过在<code>Context.Consumer</code>组件内部，我们需要用函数作为子元素的方法：代码如下：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Context.Consumer</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span><span class="token punctuation">&#123;</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token punctuation">&#125;</span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Context.Consumer</span></span><span class="token punctuation">></span></span></code></pre><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> createContext <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> MyContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建Context</span><span class="token comment">// 子组件</span><span class="token keyword">class</span> <span class="token class-name">Children</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyContext.Consumer</span></span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token punctuation">&#123;</span><span class="token comment">/* 使用Consumer */</span><span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token punctuation">&#123;</span><span class="token comment">/* 用函数作为子元素 */</span><span class="token punctuation">&#125;</span><span class="token plain-text">                </span><span class="token punctuation">&#123;</span>                    <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                <span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyContext.Consumer</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        value<span class="token operator">:</span> <span class="token number">20</span>    <span class="token punctuation">&#125;</span><span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token punctuation">&#123;</span><span class="token comment">/* 使用Provider */</span><span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>                     <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> value<span class="token operator">:</span> value <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>                <span class="token punctuation">></span></span><span class="token plain-text">                    press                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Children</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyContext.Provider</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>以上代码中，我们使用了<code>Context.Provider</code>和<code>Context.Consumer</code>搭配完成了数据传输，这里只是垮了一个层级来传递参数，当然可以跨多层传递。我们在页面中打开后，点击按钮，数值会一直减1。这样我们就实现了一个<code>Context</code>跨组件传值。</p><p>由上述代码，我们可知，如果每次我们想要使用<code>Provider</code>，就必须在子组件中使用<code>Consumer</code>与之搭配使用，这样总觉得有点繁琐，那有没有什么办法让我们摆脱<code>Consumer</code>的束缚，或者说在使用<code>Consumer</code>之前就已经获取到由<code>Provider</code>传递过来的值了呢？答案是肯定的，<code>React</code>给我们提供了一个<code>Api</code>：<code>contextType</code>，那我们如何使用呢？</p><p>只需要在我们的使用<code>Consumer</code>组件的地方，声明一个<code>contextType</code>静态属性，并将已创建的<code>MyContext</code>赋值给<code>contextType</code>属性，这个时候会在子组件的类中生成<code>context</code>变量，而这个变量内就保存了我们从<code>Context.Provider</code>传递过来的<code>value</code>值，具体代码如下：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 子组件</span><span class="token keyword">class</span> <span class="token class-name">Children</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> contextType <span class="token operator">=</span> MyContext<span class="token punctuation">;</span> <span class="token comment">// 声明ContextType</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyContext.Consumer</span></span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token punctuation">&#123;</span><span class="token comment">/* 使用Consumer */</span><span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token punctuation">&#123;</span><span class="token comment">/* 用函数作为子元素 */</span><span class="token punctuation">&#125;</span><span class="token plain-text">                </span><span class="token punctuation">&#123;</span>                    <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                <span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MyContext.Consumer</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>注意：虽然<code>Context</code>确实比较好用，但是<a href="https://react.docschina.org/docs/context.html#before-you-use-context">官方</a>并不推荐我们使用这种方式来进行组件传值，因为这样会使得组件的复用性变得很差！</p></blockquote><h2 id="Lazy与Suspense实现延迟加载"><a href="#Lazy与Suspense实现延迟加载" class="headerlink" title="Lazy与Suspense实现延迟加载"></a>Lazy与Suspense实现延迟加载</h2><h3 id="React-lazy"><a href="#React-lazy" class="headerlink" title="React.lazy()"></a>React.lazy()</h3><p><code>lazy</code>函数可以让你像渲染常规组件一样处理动态引入的组件，换句话说，就是懒加载，它使得我们在页面刚进入加载的时候无需加载指定组件，以便节省性能的消耗，当我们使用某个组件的时候，再进行动态加载。其实在<code>webpack</code>中，我们其实也有这种方式，那就是<code>Code-Spliting</code>，当我们在项目中使用了很多第三方包的时候，如果没有代码分割就会导致系统体积过大从而造成加载时间过长。</p><p>那么怎么进行代码分割呢？最佳方式就是通过<code>import()</code>语法。<code>import()</code> 有两种使用方式：</p><ul><li><p>正常import</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Button <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span></code></pre></li><li><p>动态引入方式</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./component.jsx'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">_</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'loading...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>当我们在组件中使用了动态引入方式后，<code>webpack</code>解析到该语法后（前提是已经配置好了代码分割），会自动的进行代码分割。</p></li></ul><p>说了这么多，那么lazy()方法到底该如何使用呢？我们首先看一下我们在组件中引入其他组件的方式：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> xxx <span class="token keyword">from</span> <span class="token string">'xxx'</span><span class="token punctuation">;</span></code></pre><blockquote><p><code>lazy()</code>方法接收一个函数，而这个函数去动态的调用<code>import()</code>，并返回一个<code>Promise</code>，该 <code>Promise</code> 需要 <code>resolve</code> 一个 <code>default</code> <code>export</code> 的 <code>React</code> 组件。</p></blockquote><p>示例：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> lazy <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./MyConponent.jsx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果我们按照上面的代码执行的话，我们会看到控制台有报错：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210203145047213.png" alt="image-20210203145047213"></p><p>大致意思就是说，如果我们使用了<code>lazy</code>函数，就需要和<code>Suspense</code>进行搭配，所以我们需要再去引入<code>Suspense</code>，然后用<Suspense></Suspense>去包裹使用<code>lazy</code>函数生成的组件。但是，我们需要在<Suspense>组件中传递<code>fallback</code>参数，用来渲染未加载到已加载的空隙代码，例如加载态。</p><blockquote><p>注意：这里<code>fallback</code>参数只接受<code>jsx</code>语法！</p></blockquote><p>代码如下：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> lazy <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./MyConponent.jsx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>接下来，我们运用日常开发的一个小示例来演示一下，使用<code>lazy</code>和使用普通<code>import()</code>的区别吧。在我们开发中，我们避免不了的使用模态框这类的组件，但是有时候模态框组件内部的代码可能比较复杂，如果我们使用普通的导入方式，就需要在页面加载的时候就进行模态框相关资源的引入，再加上内部逻辑复杂，就大大的降低了加载速度，这个时候我们可以使用<code>lazy()</code>方法去进行一个懒加载。</p><p>我们首先看一下普通导入的状态，打开我们的控制台，找到Network =&gt; All:</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210203151607707.png" alt="image-20210203151607707"></p><p>此时我们按F5刷新页面后，弹框的资源已经加载出来了，这就会导致加载时间变长，从而影响性能。</p><p>我们再来看一下使用<code>lazy</code>和<code>Suspense</code>搭配的方式：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// Modal Component</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Modal <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Modal</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Modal</span></span><span class="token punctuation">></span></span><span class="token plain-text">            do somethings            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Modal</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// Main Component</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component<span class="token punctuation">,</span> lazy<span class="token punctuation">,</span> Suspense <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Modal <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./Modal.jsx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        show<span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> show <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> show<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">press</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token punctuation">&#123;</span> show <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Modal</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们打开控制台后，我们发现并没有去加载我们的<code>Modal</code>组件，当我们点击后才会出现<code>Modal</code>组件的资源：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210203152141571.png" alt="image-20210203152141571"></p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210203152430025.png" alt="image-20210203152430025"></p><p>这边还要穿插一个小tips：我们这里可以看到我们的资源名称其实是没有语义化的，看着比较费力，我们可以用我们的魔法注释来修改一下<code>chunk</code>的名称。</p><p>语法：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: "modal" */</span><span class="token string">'./xxx.jsx'</span><span class="token punctuation">)</span></code></pre><p>再打开控制台，点击<code>press</code>按钮，我们就可以看到我们的<code>chunk</code>名称已经变了。</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210203152912079.png" alt="image-20210203152912079"></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你如何发布属于自己的npm包——react-slider-verify</title>
      <link href="2021/01/26/npm-publish/"/>
      <url>2021/01/26/npm-publish/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210406154701023.png" alt="image-20210406154701023"></p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近因为公司的工作比较忙以及自己的一些私人的事，导致很长时间没有更新博客的内容了，最近也是因为年底了就准备花点时间在博客上面吧，在npm上发包是我之前一直想做的事，但总是被各种事情打断，正好这几天稍微有点空闲时间，就去找了一些资料，也是成功的发布了属于自己的一个npm包。在此就把过程和总结当作一个笔记来记录一下吧！</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>确保当前机器上有<code>Node</code>，没有的话就去<a href="https://nodejs.org/zh-cn/download/">下载</a>安装一下；</li><li>确保有一个Github账号，如果没有的话，可以去官网<a href="https://github.com/join?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=/&source=header-home">注册</a>一个；</li><li>确保有一个npm账号，这个是必要条件，可以去官网<a href="https://www.npmjs.com/signup">注册</a>一下。</li></ol><p>在有了以上的三个条件之后，我们就可以正式啦~因为我们是基于React去发布一个组件，所以我们需要到github上创建一个仓库并初始化项目。</p><h2 id="创建仓库并初始化项目"><a href="#创建仓库并初始化项目" class="headerlink" title="创建仓库并初始化项目"></a>创建仓库并初始化项目</h2><ol><li><p>创建仓库：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210128171431220.png" alt="image-20210128171431220"></p></li><li><p>新建本地仓库：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210128171608789.png" alt="image-20210128171608789"></p><pre class="language-shell" data-language="shell"><code class="language-shell">$ git clone https:&#x2F;&#x2F;github.com&#x2F;&lt;用户名&gt;&#x2F;&lt;仓库名&gt;$ cd &lt;仓库名&gt;</code></pre></li><li><p>初始化项目：</p><p>在当前本地仓库所在目录中输入命令：</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ npm init -y</code></pre><p> 输入完之后，会在目录中生成一个<code>package.json</code>，内部记录着项目相关的信息。</p></li><li><p>在目录下新建<code>assets</code>、<code>config</code>、<code>demo</code>、<code>src</code>等目录，新建<code>.gitignore</code>文件用于忽略上传文件。具体目录机构如下：</p><pre class="language-none"><code class="language-none">assets&#x2F;&#x2F; 存放静态文件config    |-webpack.base.js&#x2F;&#x2F; webpack基础配置    |-webpack.config.dev.js&#x2F;&#x2F; webpack开发环境配置    |-webpack.config.prod.js&#x2F;&#x2F; webpack线上环境配置demo&#x2F;&#x2F; 插件演示文件入口|-demo.js&#x2F;&#x2F; 入口文件|-demo.less&#x2F;&#x2F; 样式文件|-index.htmlsrc     &#x2F;&#x2F; 项目源码目录|-index.js&#x2F;&#x2F; 插件源文件|-index.less&#x2F;&#x2F; 插件源文件样式</code></pre></li><li><p>安装需要的包和插件：</p><pre class="language-shell" data-language="shell"><code class="language-shell">npm install webpack@4.x webpack-cli@3.x @babel&#x2F;core @babel&#x2F;plugin-proposal-class-properties @babel&#x2F;plugin-proposal-decorators @babel&#x2F;plugin-proposal-object-rest-spread @babel&#x2F;plugin-transform-modules-commonjs @babel&#x2F;plugin-transform-runtime @babel&#x2F;preset-env @babel&#x2F;preset-react babel-loader css-loader html-webpack-plugin less less-loader style-loader url-loader webpack-merge --save-dev</code></pre><p>因为是基于<code>React</code>的插件，当然肯定少不了我们的主角<code>React</code>：</p><pre class="language-shell" data-language="shell"><code class="language-shell">npm install react react-dom --save</code></pre></li><li><p>生成<code>.babelrc</code>文件，然后在其内部进行<code>babel</code>的配置：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span>            <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token string">"> 0.25%, not dead"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"@babel/preset-react"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span>        <span class="token string">"@babel/plugin-transform-modules-commonjs"</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>            <span class="token string">"@babel/plugin-proposal-decorators"</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"legacy"</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"@babel/plugin-proposal-class-properties"</span><span class="token punctuation">,</span>        <span class="token string">"@babel/plugin-proposal-object-rest-spread"</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>配置<code>webpack</code>打包规则，并使用<code>webpack-merge</code>将配置合并，具体如何配置请参照<a href="https://webpack.docschina.org/">webpack官网</a>，在此只将代码贴出：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.base.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span> <span class="token comment">// 在webpack中使用babel需要babel-loader</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                loader<span class="token operator">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>                exclude<span class="token operator">:</span> <span class="token string">'/node_modules/'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span> <span class="token comment">// 用于加载组件或者css中使用的图片</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|jpeg|png|gif|cur|ico|svg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                    loader<span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span> options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        name<span class="token operator">:</span> <span class="token string">"images/[name][hash:8].[ext]"</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span> <span class="token comment">// 编译less</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                exclude<span class="token operator">:</span> <span class="token string">'/node_modules/'</span><span class="token punctuation">,</span>                use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                    loader<span class="token operator">:</span> <span class="token string">'style-loader'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    loader<span class="token operator">:</span> <span class="token string">'css-loader'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    loader<span class="token operator">:</span> <span class="token string">'less-loader'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.dev.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.base.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 引用公共的配置</span><span class="token keyword">const</span> devConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    devtool<span class="token operator">:</span> <span class="token string">'cheap-module-eval-source-map'</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token string">'./demo/demo.js'</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件</span>    mode<span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span> <span class="token comment">// 打包为开发模式</span>    output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        filename<span class="token operator">:</span> <span class="token string">'demo.bundle.js'</span><span class="token punctuation">,</span> <span class="token comment">// 输出的文件名称</span>        path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../demo'</span><span class="token punctuation">)</span> <span class="token comment">// 输出的文件目录</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 该字段用于配置webpack-dev-server</span>        contentBase<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../demo'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        compress<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        port<span class="token operator">:</span> <span class="token number">9000</span><span class="token punctuation">,</span> <span class="token comment">// 端口9000</span>        open<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 自动打开浏览器</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>devConfig<span class="token punctuation">,</span> baseConfig<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.prod.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.base.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> devConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    entry<span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>    mode<span class="token operator">:</span> <span class="token string">'production'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        filename<span class="token operator">:</span> <span class="token string">'index.js'</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件</span>        libraryTarget<span class="token operator">:</span> <span class="token string">'umd'</span><span class="token punctuation">,</span> <span class="token comment">// 采用通用模块定义, 注意webpack到4.0为止依然不提供输出es module的方法，所以输出的结果必须使用npm安装到node_modules里再用，不然会报错</span>        library<span class="token operator">:</span> <span class="token string">'react-slide-verify'</span><span class="token punctuation">,</span> <span class="token comment">// 库名称</span>        libraryExport<span class="token operator">:</span> <span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token comment">// 兼容 ES6(ES2015) 的模块系统、CommonJS 和 AMD 模块规范</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    externals<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        react<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            root<span class="token operator">:</span> <span class="token string">"React"</span><span class="token punctuation">,</span>            commonjs2<span class="token operator">:</span> <span class="token string">"react"</span><span class="token punctuation">,</span>            commonjs<span class="token operator">:</span> <span class="token string">"react"</span><span class="token punctuation">,</span>            amd<span class="token operator">:</span> <span class="token string">"react"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"react-dom"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            root<span class="token operator">:</span> <span class="token string">"ReactDOM"</span><span class="token punctuation">,</span>            commonjs2<span class="token operator">:</span> <span class="token string">"react-dom"</span><span class="token punctuation">,</span>            commonjs<span class="token operator">:</span> <span class="token string">"react-dom"</span><span class="token punctuation">,</span>            amd<span class="token operator">:</span> <span class="token string">"react-dom"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>devConfig<span class="token punctuation">,</span> baseConfig<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>配置好<code>webpack</code>后，我们需要<code>package.json</code>中的一些默认配置：</p><ul><li>修改<code>scripts</code>命令：</li></ul><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"set NODE_ENV=production &amp;&amp; webpack --config ./config/webpack.config.prod.js"</span><span class="token punctuation">,</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --config ./config/webpack.config.dev.js"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><ul><li>修改打包之后入口文件：</li></ul><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"dist/index.js"</span><span class="token punctuation">,</span> <span class="token comment">// 指定入口文件</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>接下来在<code>src/index.jsx</code>中写入插件的核心逻辑代码（由于篇幅有限，只贴出部分代码）：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.less'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ReactSlideVerify</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>canvas <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>block <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            containerActive<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// container active class</span>            containerSuccess<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// container success class</span>            containerFail<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// container fail class</span><span class="token operator">...</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始化  </span>    <span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initDom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">bindEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// do other logic</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>verify-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token punctuation">&#123;</span><span class="token comment">/* 插件内部核心html */</span><span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>     <span class="token keyword">export</span> <span class="token keyword">default</span> ReactSlideVerify<span class="token punctuation">;</span></code></pre></li><li><p>在<code>demo/demo.js</code>中引入我们写好的插件：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDom <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactSlideVerify <span class="token keyword">from</span> <span class="token string">'../src/index'</span><span class="token keyword">import</span> <span class="token string">'./demo.less'</span><span class="token punctuation">;</span><span class="token keyword">import</span> img1 <span class="token keyword">from</span> <span class="token string">'./../assets/img1.jpg'</span><span class="token punctuation">;</span><span class="token keyword">import</span> img2 <span class="token keyword">from</span> <span class="token string">'./../assets/img2.jpg'</span><span class="token punctuation">;</span><span class="token keyword">import</span> img3 <span class="token keyword">from</span> <span class="token string">'./../assets/img3.jpg'</span><span class="token punctuation">;</span><span class="token keyword">import</span> img4 <span class="token keyword">from</span> <span class="token string">'./../assets/img4.jpg'</span><span class="token punctuation">;</span><span class="token keyword">import</span> img5 <span class="token keyword">from</span> <span class="token string">'./../assets/img5.jpg'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">onSuccess</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">onFail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function-variable function">onRefresh</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'刷新'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ReactSlideVerify</span></span>                    <span class="token attr-name">...other</span> <span class="token attr-name">props</span>                    <span class="token attr-name">success</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>onSuccess<span class="token punctuation">&#125;</span></span>                    <span class="token attr-name">fail</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>onFail<span class="token punctuation">&#125;</span></span>                    <span class="token attr-name">refresh</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>onRefresh<span class="token punctuation">&#125;</span></span>                <span class="token punctuation">/></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ReactDom<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Demo</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后运行命令：<code>npm run dev</code>，这个时候就可以在浏览器中看到我们写的插件了，可以测试看看有没有什么问题。如果没有问题的话，我们就可以用线上环境的打包规则去打包我们的代码了。</p></li></ol><h2 id="发布到npm上"><a href="#发布到npm上" class="headerlink" title="发布到npm上"></a>发布到npm上</h2><p>发布到npm上面去其实很简单就只有两个命令：<code>npm login</code> 和 <code>npm publish</code>：</p><h3 id="npm-login"><a href="#npm-login" class="headerlink" title="npm login"></a><code>npm login</code></h3><p>首先我们打开控制台，输入命令：<code>npm login</code>，这个时候会让我们输入npm注册时候的账号和密码以及邮箱：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210129090908541.png" alt="image-20210129090908541"></p><p>当出现最后一行话就代表已经登录成功了。</p><blockquote><p>注意：这里再登录的时候，请不要使用<code>cnpm</code>淘宝源，否则会出现登录不上的问题！</p></blockquote><h3 id="npm-publish"><a href="#npm-publish" class="headerlink" title="npm publish"></a><code>npm publish</code></h3><p>接下来进入到我们的本地代码，打开控制台后，输入命令：<code>npm publish</code>：</p><blockquote><p>注意：在发布之前请看下<code>package.json</code>中的<code>name</code>是否在<code>npm</code>仓库中已经注册了，如果已经注册了，就换个名字；</p><p>​          如果是要更新所发布的包，请务必将<code>package.json</code>中的<code>version</code>更改一下，否则会导致发布不成功!</p></blockquote><p>由于每次都是先进行线上环境的打包，然后再发布，我们可以再新加入一个命令，让它同时执行以上两步：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"set NODE_ENV=production &amp;&amp; webpack --config ./config/webpack.config.prod.js"</span><span class="token punctuation">,</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --config ./config/webpack.config.dev.js"</span><span class="token punctuation">,</span>    <span class="token property">"publish"</span><span class="token operator">:</span> <span class="token string">"npm run build &amp;&amp; npm publish"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><p>这个时候我们就可以通过执行命令<code>npm run publish</code>来进行发布即可。</p><h3 id="npm-unpublish"><a href="#npm-unpublish" class="headerlink" title="npm unpublish"></a><code>npm unpublish</code></h3><p>既然可以发布，就可以下架，我们可以运行命令：<code>npm --force unpublish &lt;包名&gt;</code>:</p><p>这个时候npm官方就会提示你一句比较有意思的话：</p><blockquote><p><code>I sure hope you know what you are doing</code></p></blockquote><p>到此为止，关于在这次发布组件所遇到的问题就大致这些了，如果以后遇到其他的问题，会及时更新！</p>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> npm </tag>
            
            <tag> 发布组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目中常用方法，可收藏一下😘</title>
      <link href="2021/01/07/project-utils/"/>
      <url>2021/01/07/project-utils/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210406155827230.png" alt="image-20210406155827230"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们日常的项目开发中，我们喜欢将一些公用的方法，例如，请求方法，统一操作缓存的方法等等，将这写方法会单独抽离出来，然后放到统一的utils文件中，然后暴露给外部去使用，这就使得我们的项目更加的完善，也更加的有层次感。接下来，我将一些目前在我的项目中常用的方法贴出来，可供以后使用。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="常用工具方法"><a href="#常用工具方法" class="headerlink" title="常用工具方法"></a>常用工具方法</h3><p>所谓工具方法，就是说在项目中，我们可能需要通过一些方法执行一些特定的事，比如判断一个对象是否为空、动态生成一个<code>uuid</code>、以及通过文件流下载的方法等等</p><h4 id="下载公共方法"><a href="#下载公共方法" class="headerlink" title="下载公共方法"></a>下载公共方法</h4><p>首先先安装我们的<code>fetch</code>请求库</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> cross-fetch --save-d</code></pre><p>方法如下：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 方法下载 * @param url 下载的url * @param opt 配置项 * @returns &#123;Promise&lt;any>&#125; */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fetchDownload</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> opt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">blob</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取 blob 本地文件连接 (blob 为纯二进制对象，不能够直接保存到磁盘上)</span>            <span class="token keyword">let</span> filename <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">decodeURI</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取文件名并处理文件名编码问题</span>            filename <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'utf-8\'zh_cn\''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span>            a<span class="token punctuation">.</span>download <span class="token operator">=</span> filename<span class="token punctuation">;</span>            a<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </code></pre><h4 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 内部函数, 用于判断对象类型</span><span class="token keyword">function</span> <span class="token function">_getType</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\[object\s(.*)\]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 判断是否为数组</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isArray</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">_getType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'array'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 判断是否为字符串</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">_getType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 判断是否为日期</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isDate</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">_getType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'date'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 判断是否为对象</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">_getType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 判断是否为数值</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">_getType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'number'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @desc 判断参数是否为空, 包括null, undefined, [], '', &#123;&#125; * @param &#123;object&#125; obj 需判断的对象 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> empty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> obj <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// null and undefined</span>        empty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        empty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> hasProp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                hasProp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasProp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            empty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> empty<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @desc 判断参数是否不为空 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @desc 判断参数是否为空字符串, 比isEmpty()多判断字符串中有空格的情况, 如: '   '. * @param &#123;string&#125; str 需判断的字符串 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @desc 判断参数是否不为空字符串 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isNotBlank</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isBlank</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @desc 判断参数是否为FormData对象 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isFormData</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">FormData</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="动态生成uuid"><a href="#动态生成uuid" class="headerlink" title="动态生成uuid"></a>动态生成<code>uuid</code></h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @desc 生成一个随机id */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[xy]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> r <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">,</span> v <span class="token operator">=</span> c <span class="token operator">===</span> <span class="token string">'x'</span> <span class="token operator">?</span> r <span class="token operator">:</span> <span class="token punctuation">(</span>r <span class="token operator">&amp;</span> <span class="token number">0x3</span> <span class="token operator">|</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="获取地址栏参数对象以及值"><a href="#获取地址栏参数对象以及值" class="headerlink" title="获取地址栏参数对象以及值"></a>获取地址栏参数对象以及值</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @desc 获取 url 参数，因为 this.props.location.query 不能得到带有 # 的参数，所以添加此方法 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">;</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        num <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            name <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            value <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @desc 通过URL搜索对象获取url参数, 如www.xxx.com?a=1&amp;b=2, getURLParam('a') return 1 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getURLParam</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBlank</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> urlQuery <span class="token operator">=</span> <span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> urlQuery<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="生成指定范围的随机整数"><a href="#生成指定范围的随机整数" class="headerlink" title="生成指定范围的随机整数"></a>生成指定范围的随机整数</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 生成随机整数 * @param min * @param max * @constructor */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    min <span class="token operator">=</span> min <span class="token operator">||</span> <span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">;</span>    max <span class="token operator">=</span> max <span class="token operator">||</span> <span class="token number">90</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> min <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="深度拷贝"><a href="#深度拷贝" class="headerlink" title="深度拷贝"></a>深度拷贝</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 第一种方式</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 第二种方式</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>source <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> source <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'error arguments'</span><span class="token punctuation">,</span> <span class="token string">'shallowClone'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> targetObj <span class="token operator">=</span> source<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> keys <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">[</span>keys<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> source<span class="token punctuation">[</span>keys<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                targetObj<span class="token punctuation">[</span>keys<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>keys<span class="token punctuation">]</span><span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                targetObj<span class="token punctuation">[</span>keys<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>keys<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                targetObj<span class="token punctuation">[</span>keys<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>keys<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> targetObj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="表格序号索引"><a href="#表格序号索引" class="headerlink" title="表格序号索引"></a>表格序号索引</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 获取表格索引序号 * @param index * @param start * @param size * @returns &#123;*&#125; */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getTableIndex</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> start<span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">10</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="缓存类方法"><a href="#缓存类方法" class="headerlink" title="缓存类方法"></a>缓存类方法</h3><p>项目中，我们需要偶尔去操作一下缓存，<code>sessionStorage</code>或者<code>localStorage</code>等，所以我们这边特别的封装了几个方法，供以后项目中使用：</p><h4 id="sessionStorage方法"><a href="#sessionStorage方法" class="headerlink" title="sessionStorage方法"></a><code>sessionStorage</code>方法</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 设置session * @param name 存储名称 * @param value 存储值 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setSession</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> sessionStorage <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 获取session * @param name 存储名称 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> sessionStorage <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="localStorage方法"><a href="#localStorage方法" class="headerlink" title="localStorage方法"></a><code>localStorage</code>方法</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 设置Local * @param name 存储名称 * @param value 存储值 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setLocal</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> localStorage <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 获取Local * @param name 存储名称 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getLocal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> localStorage <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="sessionStorage和localStorage共有方法"><a href="#sessionStorage和localStorage共有方法" class="headerlink" title="sessionStorage和localStorage共有方法"></a><code>sessionStorage</code>和<code>localStorage</code>共有方法</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 移除session或者Local * @param name 存储名称 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> sessionStorage <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> localStorage <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 移除session或者Local全部内容 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> sessionStorage <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> localStorage <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="请求方法类"><a href="#请求方法类" class="headerlink" title="请求方法类"></a>请求方法类</h3><p>我们在项目中，必不可免的要和请求打交道，如果我们使用常规的<code>ajax</code>或者<code>axios</code>去请求的话，就会造成我们代码量非常冗余，所以接下来用<code>promise</code>封装一个通用的请求方法吧，这里我们需要用到上述的一些共有方法。在封装之前，我们需要安装两个插件——<code>axios</code>和<code>qs</code>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> axios --save<span class="token function">npm</span> <span class="token function">install</span> qs --save-dev</code></pre><p><code>axios</code> 相信大家已经很熟悉了，在这里就不去过多的介绍了，我们来着重看下<code>qs</code>是个什么东西：</p><p><code>qs</code> 官方给出的定义是序列化一个对象，<code>qs</code> 有两个常用方法：<code>qs.parse()</code>、<code>qs.stringify()</code></p><p><code>qs.parse()</code>方法是用于将一个<code>url</code>解析成对象的格式：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> url <span class="token operator">=</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">?</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&#123;</span><span class="token comment">//    a: 1,</span><span class="token comment">//    b: 2,</span><span class="token comment">//    c: 3</span><span class="token comment">//&#125;</span></code></pre><p><code>qs.stringify()</code>方法是<code>qs.parse()</code>方法的逆执行：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a=1&amp;b=2&amp;c=3</span></code></pre><p>接下来就是请求方法的封装，因为我的项目是react，所以我们是基于<code>antd</code>和<code>react-router</code>进行的封装，如果使用其他框架，请自行替换：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isString<span class="token punctuation">,</span> isBlank<span class="token punctuation">,</span> isEmpty<span class="token punctuation">,</span> isNotEmpty<span class="token punctuation">,</span> isFormData <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./util'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getSession <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./storage.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">'qs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> message <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> browserHistory <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-router'</span><span class="token punctuation">;</span><span class="token comment">/** * @desc 使用axios第三方库访问后台服务器, 返回封装过后的Promise对象. * @param &#123;string&#125; url 请求的接口地址, 格式: "/xxx..." * @param urlType * @param &#123;string&#125; domain 跨域请求的域名地址, 如: http://www.baidu.com * @param &#123;string&#125; type HTTP请求方式, 默认GET. * @param &#123;object&#125; data 请求的数据, object对象格式 * @param contentType * @param &#123;function&#125; onUpload 上传文件过程中的回调函数, 接收progressEvent参数. * @param &#123;function&#125; onDownload 下载文件过程中的回调函数, 接收progressEvent参数. * @param &#123;function&#125; cancel 取消请求的回调函数, 接收cancel参数, 当执行cancel()参数时请求被取消. * @param &#123;number&#125; timeout 配置请求超时时间, 为毫秒数, 默认从配置文件读取. * @param closeTips * @param &#123;boolean&#125; cache 是否开启缓存, 开启后同样的请求(url相同, 参数相同), 第二次请求时会直接返回缓存数据, 不会请求后台数据, 默认false. * @param &#123;boolean&#125; handleError 是否自动处理接口报错情况, 默认true. * @return &#123;object&#125; - 返回一个promise的实例对象 */</span><span class="token keyword">const</span> ContentType <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token constant">JSON</span><span class="token operator">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>    <span class="token constant">FORM_URLENCODED</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                              url <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>                              urlType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                              type <span class="token operator">=</span> HttpMethod<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span>                              data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                              contentType <span class="token operator">=</span> ContentType<span class="token punctuation">.</span><span class="token constant">JSON</span><span class="token punctuation">,</span>                              onUpload <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                              onDownload <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                              cancel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                              closeTips <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                              handleError <span class="token operator">=</span> <span class="token boolean">true</span>                          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> getData<span class="token punctuation">;</span>    <span class="token keyword">let</span> postData<span class="token punctuation">;</span>    <span class="token keyword">let</span> cancelToken<span class="token punctuation">;</span>    <span class="token keyword">let</span> crossDomain <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> HttpMethod<span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            postData <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ContentType<span class="token punctuation">.</span><span class="token constant">FORM_URLENCODED</span> <span class="token operator">===</span> contentType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isFormData</span><span class="token punctuation">(</span>postData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    postData <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>postData<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> allowDots<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        getData <span class="token operator">=</span> data <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">:</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>cancel<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cancelToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">axios<span class="token punctuation">.</span>CancelToken</span><span class="token punctuation">(</span>cancel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">'User-Token'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token string">'User-Token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加token</span>        axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">'X-Requested-With'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">;</span>        axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> contentType <span class="token operator">+</span> <span class="token string">';charset=UTF-8'</span><span class="token punctuation">;</span>        <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            method<span class="token operator">:</span> type<span class="token punctuation">,</span>            baseURL<span class="token operator">:</span> <span class="token string">'/api/v1.0/'</span><span class="token punctuation">,</span> <span class="token comment">// 看项目是否配置了ngix反向代理</span>            url<span class="token operator">:</span> url<span class="token punctuation">,</span>            timeout<span class="token operator">:</span> timeout<span class="token punctuation">,</span>            params<span class="token operator">:</span> getData<span class="token punctuation">,</span>            data<span class="token operator">:</span> postData<span class="token punctuation">,</span>            withCredentials<span class="token operator">:</span> crossDomain<span class="token punctuation">,</span>            onUploadProgress<span class="token operator">:</span> onUpload<span class="token punctuation">,</span>            onDownloadProgress<span class="token operator">:</span> onDownload<span class="token punctuation">,</span>            cancelToken<span class="token operator">:</span> cancelToken        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBlank</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> responseData <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>responseData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        responseData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>responseData<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>urlType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                responseData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>responseData<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>handleError<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'数据异常'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>urlType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>responseData<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">||</span> responseData<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">403</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>responseData<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>responseData<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">332</span> <span class="token operator">||</span> responseData<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">302</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        browserHistory<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token function">reject</span><span class="token punctuation">(</span>responseData<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>responseData<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 服务端返回的异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>方法已经封装好了，那么怎么去使用呢？</p><p>首先，我们可以新建一个请求方法的js文件，引入刚才的请求方法：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Request <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'utils'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        url<span class="token operator">:</span> <span class="token string">'/getList'</span><span class="token punctuation">,</span>        type<span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>        data    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在需要调用接口的地方，我们可以这么使用：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getData <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./services'</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 调用接口</span>        <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> search<span class="token operator">:</span> <span class="token string">''</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>以上这些就是目前项目中使用的共有方法，后续还会继续更新…</p>]]></content>
      
      
      <categories>
          
          <category> 常用方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 手写代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript从入门到精（fang）通（qi）</title>
      <link href="2020/12/30/typescript-start/"/>
      <url>2020/12/30/typescript-start/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    TypeScript在这几年前端开发者可能是必会的一项技术了，它是<code>javascript</code>的一个超集。就类似我们之前学过的<code>css</code>，这个<code>css</code>就相当于是我们原生的<code>js</code>，但是当我们真正开发项目时，我们可能不会用原生的<code>css</code>，我们可能会使用<code>less</code>、<code>sass</code>、<code>stylus</code> 等语言实现我们想要的<code>css</code>，因为使用这些解释器就可以将我们的代码解析成<code>css</code>。这个过程同样适用于<code>js</code>。我们都知道，<code>js</code>是一门弱类型的语言，什么是弱类型语言呢？就是说，它内部的一些类型，都是很松散的。学过C、C++ 、以及Java 的都知道，当我们声明了一个变量，这个变量就会被赋予一个类型（整形，浮点型等）,然而弱类型并没有这种优势。js：不管你来什么数据，小爷我都是照单全收~~，此时TS就是为了解决这个问题而被创作出来的。现在就让我们一起看看吧！</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在学习之前，我们还是来一起看一下如何安装typescript，如果连开发环境都运行不起来，那一切都还有什么意义呢？</p><ol><li><p>通过 <code>npm</code> 进行全局安装：</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ npm install  -g typescript</code></pre></li><li><p>安装完成后，我们新建一个名为 <code>test.ts</code> 的文件：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">greeting</span><span class="token punctuation">(</span>sth<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">I am learning </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>sth<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token string">'TypeScript'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>打开控制台，然后用编译命令 <code>tsc</code> + 我们的文件名：</p><pre class="language-none"><code class="language-none">$ tsc test.ts</code></pre><p>​    这个时候我们会看到一个文件名为 <code>test.js</code> 的文件，这个就是将我们 <code>test.ts</code> 通过 <code>tsc</code> 命令解析出来后的js文件，里面是原生js的代码</p></li><li><p>然后我们利用命令行去执行 <code>test.js</code> 的代码，在这之前请确保你的机器上安装了<code>node</code>：</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ node test.js  &#x2F;&#x2F; &#39;I am learning TypeScript&#39;</code></pre><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2></li></ol><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><p>​        无论什么语言，都会有基础类型，我们这次就直接拿<code>js</code>与 <code>ts</code>做个比较学习，首先我们复习一下<code>js</code>的基础类型有哪些：<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Null</code>、<code>Undefined</code>、<code>Symbol</code>。那么在<code>ts</code>中，我们也有自己的基础类型，并且在<code>js</code>的基础上，新加了几种基础类型，<code>TS</code>的基础类型有：<code>string</code>、<code>number</code>、<code>boolean</code>、<code>any</code>、<code>undefined</code>、<code>null</code>、数组类型、元组类型、枚举类型、<code>void</code>类型、<code>Never</code>类型、<code>object</code>类型、类型断言。接下来我们一个一个的看：</p><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'indexsarrol'</span><span class="token punctuation">;</span>str <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// 会报错，因为声明了str为string类型的变量</span></code></pre><p>​        由上述代码我们可以知道，如果我们想为一个变量去设置某一种类型，可以在变量后面添加 ’：类型名称‘。在这里我们声明了有一个变量<code>str</code>并给了 <code>str</code> 一个类型 <code>string</code> ，这就表示这个变量只能接受字符串类型的变量，如果我们给它设置了<code>str = 123</code> ，此时就会报错 <code>Type &#39;123&#39; is not assignable to type &#39;string&#39;</code> 。</p><h4 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span> <span class="token comment">// 会报错，因为声明了num为number类型的变量</span></code></pre><p>在赋予了一个变量为<code>number</code>类型后，该变量就和<code>js</code>中的数字没有任何区别，所以方法以及属性完全使用。</p><h4 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> bool<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>bool <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span> <span class="token comment">// 会报错，因为声明了bool为boolean类型的变量</span></code></pre><h4 id="Any类型"><a href="#Any类型" class="headerlink" title="Any类型"></a>Any类型</h4><p>话说刚开始写<code>ts</code>的时候，各种不习惯，然后各种写<code>any</code>，很显然这个确实不太合理。</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> anyVar<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>anyVar <span class="token operator">=</span> <span class="token string">'str'</span><span class="token punctuation">;</span>anyVar <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>anyVar <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 以上方式都是合法的</span></code></pre><p>any类型我们可以单纯的理解为就是原生js中的变量，是一种非常松散的类型，如果声明了该类型，那么这个变量可以赋值为任意值。</p><h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><p>在TS中，数组的表示方法有两种：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 方法1</span><span class="token keyword">let</span> arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">// 尖括号内部写的是该数组内部的每一项是什么类型，在这里，内部都是number类型</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">3</span>'<span class="token punctuation">]</span> <span class="token comment">// 报错， 因为内部定义的是number类型</span><span class="token comment">// 方法2</span><span class="token keyword">let</span> arr <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment">// 推荐使用，因为可能在jsx语法中，尖括号这种可能会被识别成jsx语法</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token number">3</span>'<span class="token punctuation">]</span> <span class="token comment">// 报错， 因为内部定义的是number类型</span></code></pre><p>这里我们可能会有点疑惑？数组既然这样的话，那就没有办法实现内部每一项不同类型的情况了，别急，我们接着往下看。</p><h4 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h4><p>我们上述说到了数组类型，但是我们如果想设置数组内部为不同类型的话，我们就可能需要用到元组类型了。元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> arr<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">'234'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//报错</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span> <span class="token comment">// 报错 </span></code></pre><p>这个时候我们可以看到声明了arr数组之后，如果内部的类型不对的话或者length不对的情况下，则会报错。</p><h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><p>枚举类型，通常表示一些常量的组，例如：人的性别，一年四季等；我们用关键字 <code>enum</code> 声明：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Sex <span class="token punctuation">&#123;</span>    Male<span class="token punctuation">,</span>    Female<span class="token punctuation">&#125;</span><span class="token keyword">let</span> indexsarrol<span class="token operator">:</span> Sex <span class="token operator">=</span> Sex<span class="token punctuation">.</span>Female<span class="token punctuation">;</span><span class="token comment">// 这里indexsarrol这个变量 只能取Male/Female</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Sex<span class="token punctuation">.</span>Male<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Sex<span class="token punctuation">.</span>Female<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>Sex<span class="token punctuation">.</span>Male <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>Sex<span class="token punctuation">.</span>Female <span class="token comment">// 11</span>Sex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Male'</span><span class="token punctuation">;</span>Sex<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Female'</span><span class="token punctuation">;</span></code></pre><p>这里我们可以看到，如果我们打印<code>Sex.Male</code> 是为 0 ；这个就是<code>Sex</code>中<code>Male</code>的值；如果我们设置了<code>Male = 10</code> 的话，则<code>Female</code> 则为11，由此我们可以知道，如果前一个类型被赋值了，则下列类型的值则递增。</p><p>如果我们直接访问<code>Sex[0]</code>的话，我们会拿到<code>Male</code>；这让我们联想到了对象，那么这个<code>enum</code>是怎么实现的呢？我们可以看看：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">var</span> Sex<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>Sex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Sex<span class="token punctuation">[</span>Sex<span class="token punctuation">[</span><span class="token string">'Male'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Male'</span><span class="token punctuation">;</span>    Sex<span class="token punctuation">[</span>Sex<span class="token punctuation">[</span><span class="token string">'Female'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Female'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>Sex <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这里其实我们可以看到 首先声明了一个对象，这里的写法可能有点同学未必能看懂，我们可以转换一下：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">var</span> Sex <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    Male<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    Female<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token operator">:</span> <span class="token string">'Male'</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token operator">:</span> <span class="token string">'Female'</span><span class="token punctuation">&#125;</span></code></pre><p>这样我们就可以看清楚了，其实就是一个对象，其内部放入了4个属性，这样也就不难理解我们之前些的一些代码了。</p><h4 id="Void类型"><a href="#Void类型" class="headerlink" title="Void类型"></a>Void类型</h4><p><code>Void</code>类型可以说是与<code>Any</code>相反的一个类型用来表示没有任何类型，一般我们在日常开发中，一般用于函数是否存在返回值：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span>length <span class="token operator">+</span> num<span class="token punctuation">;</span> <span class="token comment">// 报错，test函数设置了没有返回值void，所以return语句就会报错。</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Never类型"><a href="#Never类型" class="headerlink" title="Never类型"></a>Never类型</h4><p><code>Never</code>类型表示那些永远不存在的值，<code>never</code>类型是那些总是会抛出异常或根本就不会有返回值的的函数表达式：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'报错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">never</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h4><p><code>Object</code>类型就是指定一个变量为<code>object</code>类型但是这个地方需要我们注意的是，数组也是一个对象，所以当我们声明了变量为<code>object</code>，给他赋值为一个数组是没有问题的：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> obj<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 可以</span><span class="token keyword">let</span> arr<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 可以</span><span class="token keyword">let</span> str<span class="token operator">:</span> object <span class="token operator">=</span> <span class="token string">'2345'</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span></code></pre><h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><p>有时候你会遇到这样的情况，你会比<code>TypeScript</code>更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</p><p>通过<strong>类型断言</strong>这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 <code>TypeScript</code>会假设你，程序员，已经进行了必须的检查。</p><p>类型断言有两种形式：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">'Indexsarrol'</span><span class="token punctuation">;</span><span class="token comment">// 方式1</span><span class="token keyword">let</span> len<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span>str<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">// 方式2</span><span class="token keyword">let</span> len<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>str <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 推荐使用</span><span class="token comment">// 其实类型断言的本质就是强制改变一个变量本身存在的类型</span></code></pre><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的JS——闭包篇（下篇）</title>
      <link href="2020/12/28/closure-end/"/>
      <url>2020/12/28/closure-end/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210406161440771.png" alt="image-20210406161440771"></p><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在上篇 <a href="/2020/12/28/closure-start/">你不知道的JS——闭包篇（上篇）</a>我们事先引入了一个立即执行函数的概念，在本篇中我们将详细的介绍以下闭包：</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>由两个函数或多个函数嵌套而成，内部的函数被保存到了外部函数，使得在外部作用域下能够访问到内部的变量，这就形成了闭包。闭包会导致原有的作用域链不释放，从而造成内存泄漏。</p></blockquote><h2 id="为什么会出现闭包"><a href="#为什么会出现闭包" class="headerlink" title="为什么会出现闭包"></a>为什么会出现闭包</h2><p>在我们知道了闭包的定义之后，我们就来说说为什么会出现这个东西，这个时候我们要联系之前所说的作用域以及作用域链的知识了。我们用一个简单的闭包代码边看边解释：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>首先声明了一个函数<code>a</code>，这个时候在作用域链上压入了一个全局执行期上下文<code>GO</code>，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20201228140923266.png" alt="image-20201228140923266"></p></li><li><p>然后执行<code>a</code>函数，这个时候在原有的作用域链上压入<code>a</code>函数的执行期上下文<code>aAO</code>，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20201228141349464.png" alt="image-20201228141349464"></p></li><li><p><code>a</code>函数执行的时候出发了<code>b</code>函数的定义，<code>b</code>函数站在<code>a</code>函数基础上生成<code>a</code>函数留给它的成果，也就是<code>a</code>函数的<code>AO</code>以及全局的<code>GO</code>，我们的图可以这么画：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20201228141414658.png" alt="image-20201228141414658"></p></li><li><p>因为b函数仅是定义，并没有被执行，然后我们跳过<code>function b() &#123;&#125;</code> 先看<code>return b</code>，这个时候b函数被保存到了外部，此时意味着<code>a</code>函数执行完成，此时<code>aAO</code>函数的作用域链弹出，相当与剪短了<code>a</code>函数作用域与<code>aAo</code>的连线，因为<code>a</code>函数把连线剪短了，但是<code>b</code>函数还保留着对<code>aAO</code>的引用：如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20201228141442616.png" alt="image-20201228141442616"></p></li><li><p>这个时候<code>b</code>函数被保存到了外部，执行<code>b</code>函数，在作用域链中压入<code>b</code>函数的<code>AO</code>，会执行<code>num = num + 1</code>。先会去找<code>b</code>的执行期上下文，但是<code>b</code>没有变量<code>num</code>， 就会去找<code>aAO</code>，找到后使<code>num</code>自增。如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20201228141522075.png" alt="image-20201228141522075"></p></li></ul><p>以上就是闭包生成的过程。</p><h2 id="经典案例（打印0-9问题）"><a href="#经典案例（打印0-9问题）" class="headerlink" title="经典案例（打印0~9问题）"></a>经典案例（打印0~9问题）</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    demo<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>这道题也算是闭包的经典案例了，在视觉看来，这里的执行应该打印0~9，但是事实却不尽人意，他的结果是10个10，这是为什么呢？</p><blockquote><p>原因：首先先执行<code>test</code>函数，申明了一个<code>arr</code>数组，将10个函数放到<code>arr</code>里面，注意：此时该匿名函数并没有执行！！ 然后把<code>arr</code>数组给保存到了外部，然后再依次执行函数，这时，i已经变成了10，所以打印出来之后都是10！</p></blockquote><p>如何解决呢？还记得我们在上篇说的立即执行函数吗？这个时候就派上用场了，我们再来回顾一下立即执行函数的特点吧，第一声明过后会立即执行 函数， 第二，执行过后直接销毁。那么针对这个案例我们需要怎么去改呢？请看下面的代码：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 第一种方式</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2 3 4 ... 9       </span>            <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    demo<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 第二种方式，直接使用ES6的 let 去声明变量，从而形成块状作用域</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2 3 4 ... 9       </span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    demo<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p> 这里就是用闭包去解决闭包的问题了，我们在<code>arr[i]</code>赋值的时候外层套了一层立即执行函数，当循环遍历的时候会立即执行这个函数，此时该立即执行函数与<code>arr[j] = function（） &#123;&#125;</code> 也形成了闭包，在立即执行函数传入<code>i</code>，在函数内部接受，此时j是拿的外层立即执行函数的<code>AO</code>，访问到了<code>i</code>，所以这里打印就变成了0~9。</p><h2 id="阿里面试题"><a href="#阿里面试题" class="headerlink" title="阿里面试题"></a>阿里面试题</h2><p>这是来自阿里的一道面试题，编写一个函数，给每个<code>&lt;li&gt;&lt;/li&gt;</code>添加点击事件，打印当前点击的索引</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>我们认为的方法：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 错误版本</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> oLis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oLis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        oLis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 4 4 4</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这时候我们看到打印出来的是4个4，并没有得到我们想要的结果，那现在我们把代码给稍微换个表达方式看看。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> oLis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oLis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        oLis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 4 4 4</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// oLis[i].addEventListener('click', function()&#123;</span>        <span class="token comment">//    console.log(i); // 4 4 4 4</span>        <span class="token comment">// &#125;);</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们可以看到其实<code>addEventListener</code>等价于<code>.onclick</code>，而这个<code>onclick</code>是直接绑定到<code>&lt;li&gt;&lt;/li&gt;</code>上的，就像这样：<code>&lt;li onclick=&#123;function() &#123; &#125;&#125;&gt;&lt;/li&gt;</code>，这个时候我们看到此时这个函数已经被保存到了外部，这下知道为什么会触发闭包了！</p><p>解决方案：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> oLis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oLis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             oLis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 1, 2, 3</span>             <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// oLis[i].addEventListener('click', function()&#123;</span>        <span class="token comment">//    console.log(i); // 4 4 4 4</span>        <span class="token comment">// &#125;);</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样我们利用了闭包解决了无意之间触发的闭包问题了，闭包到这里就结束了。</p>]]></content>
      
      
      <categories>
          
          <category> 你不知道的JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS引擎 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的JS——闭包篇（上篇）</title>
      <link href="2020/12/28/closure-start/"/>
      <url>2020/12/28/closure-start/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210406161551214.png" alt="image-20210406161551214"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在正式了解闭包之前，我们先了解一个东西——立即执行函数，那么什么是立即执行函数呢？一起看下吧！</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>所谓的立即执行函数，顾名思义，就是一个函数可以立即执行，且执行过后将被销毁。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p> 立即执行函数有两种官方给出的写法：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 第一种 </span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 第二种</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p> 以上两种写法均可，但W3C官方推荐我们使用第一种方式；</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p> ​        假设我们现在有一个这样的场景，计算1 + 2 + 3 + … + 100，计算完之后拿到得到的值去进入下一步操作，那么如果我们单纯的去写一个函数的话，因为这个函数在使用一次之后，我们就不需要了，所以就会占用着内存空间，不太友好，这个时候我们的立即执行函数就派上用场了。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 此处省略100000行代码</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>看到这里我们不禁想了一下，这个函数真的会被销毁吗？是不是因为这个函数压根没有名字，这才看似被销毁了吧？按照这个疑问，我们给这个匿名函数加上一个函数名称看一下：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 此处省略100000行代码</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// Uncaught ReferenceError: a is not defined</span></code></pre><p> 那么立即执行函数如何传参呢？</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 形参</span>   <span class="token keyword">let</span> d <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> d<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实参在这里</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span></code></pre><h2 id="深度挖掘"><a href="#深度挖掘" class="headerlink" title="深度挖掘"></a>深度挖掘</h2><p>接下来，请记住这样一句话：</p><p> 只有表达式才能被执行符号（ 就是传说中的花括号 ）执行</p><p>首先，我们先来一串代码看看效果</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 正常函数</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token comment">// 反人类函数</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 报语法错误</span></code></pre><p>由上面的代码我们可以知道，正常函数我们直接去执行是没有问题的。但是反人类函数就执行不出来了，这就要联系到刚才我们所说的那句话，只有表达式才能被执行符号（ 就是传说中的花括号 ）执行。</p><p>再来看看下面这串代码：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 'test'</span></code></pre><p>上述代码大家理解肯定没有问题，声明一个匿名函数赋给<code>test</code>变量，然后<code>test</code>执行，打印结果。注意：此时这个<code>test = function（）&#123;&#125;</code> 就是一个表达式，所以可以执行。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">+</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我竟然能执行！！！'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>​        上面的代码竟然能执行！！！这是为什么呢？还是那句话，因为当我们前面添加了“+”后，这串代码就变成了一个表达式了，表达式才能被执行符号执行，所以这个是可以执行的，类似于“-”等等只要是能把函数声明转换成表达式的操作都可以被执行。于是，形成了我们现在推荐的那种立即执行函数的写法。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 此处省略100000行代码</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>原理：<em>因为括号也是一种运算符，所以添加它之后，我们的函数就变成了表达式，所以能被执行，后来又因为执行过后函数被销毁，导致了我们给函数添加名称和不添加的效果是一样的，所以索性直接去掉函数名称，于是最后发展成了现在我们看到的W3C推荐的格式！</em></p><h2 id="阿里面试题"><a href="#阿里面试题" class="headerlink" title="阿里面试题"></a>阿里面试题</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">// 能否执行？</span></code></pre><p>在正常看来，如果不带参数，这串代码绝对不能执行，但是，这道题恶心就恶心在你对执行符号的理解程度，“（）”这样就是单纯的去执行某个函数，但是（）内部一旦传入参数，它就不是执行符号了，这串代码就变成了这样：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">// 变成了分开执行</span></code></pre><p>所以这里既不会报错，有没有相应的输出，总结了这么多，有没有感觉小小的立即执行函数也能挖出来那么多有意思的事。</p><p>链接：<a href="/2020/12/28/closure-end/">你不知道的JS——闭包篇（下篇）</a></p>]]></content>
      
      
      <categories>
          
          <category> 你不知道的JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS引擎 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的JS——事件循环机制（Event Loop）</title>
      <link href="2020/12/27/js-event-loop/"/>
      <url>2020/12/27/js-event-loop/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210406174858206.png" alt="image-20210406174858206"></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        Event Loop，也就是事件循环机制，相信大家都多多少少听过一些，事件循环机制分为浏览器的以及Node环境下的，今天我们就只先针对浏览器来解释。一起来看看吧！</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>​        事件循环机制简单理解的话就是一种浏览器对代码的执行顺序（还有Node下面也有Event Loop，我们可以先忽略）,我们都知道js的任务可以分为同步和异步：</p><blockquote><p>同步：按照主线程来一步一步依次执行代码；</p></blockquote><blockquote><p>异步：把要执行的部分先放到任务队列中，让主线程的任务和任务队列中的任务分开执行。</p></blockquote><p>还记得我们之前说过的作用域链吗？在这里它有一个新的名字——调用栈。</p><p>这下我们就能组织出来事件循环机制的定义了：<strong>不管是同步还是异步任务，将这些任务放入调用栈执行，执行完之后去检查有无新的任务，如果有，则继续循环执行，如果没有，循环结束。</strong></p><h2 id="宏任务（Macro-Task）与微任务（Micro-Task）"><a href="#宏任务（Macro-Task）与微任务（Micro-Task）" class="headerlink" title="宏任务（Macro-Task）与微任务（Micro-Task）"></a>宏任务（Macro-Task）与微任务（Micro-Task）</h2><p>​        由上可知，事件循环机制是基于任务来执行的，任务可分成两类：宏任务与微任务，这两种任务有他们自己独有的队列，在我们的业务代码中，常见的宏任务与微任务有：</p><blockquote><p>宏任务：<code>setTimeout</code>函数、<code>setInterval</code>函数、<code>script</code>（整体代码）、<code>I/O</code>（输入/输出操作）、<code>UI</code>渲染等等</p></blockquote><blockquote><p>微任务：<code>new Promise().then(() =&gt; &#123;&#125;)</code>、<code>async/await</code>函数等。</p></blockquote><h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><ol><li>先执行宏任务的同步任务的代码（script标签内的代码）；</li><li>遇到宏任务，先把宏任务丢到宏任务的队列中；</li><li>检查当前宏任务下有没有微任务，如果有执行微任务，如果没有则该宏任务结束，去执行下一个宏任务；</li><li>如果下一个宏任务找到了就继续执行，进行第三步，如果没有则进行下一轮event loop；</li></ol><p>这样单靠言语描述可能有些难理解，在这里，我画了一张简易的流程图供大家参考：</p><p>​    <img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/event-loop2.png" alt="image-20201228105407166"></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token parameter"> </span><span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// 宏任务1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'children2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token parameter"> </span><span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// 微任务1</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'children3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'children4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">    resolve</span><span class="token punctuation">(</span><span class="token string">'children6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">    setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 宏任务2</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'children5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// resolve('children6');</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res </span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'children7'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">    setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token parameter"> </span><span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// 宏任务3</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行顺序：</p><ul><li>第一步，先执行整体代码，首先打印‘start’；</li><li>第二步，我们遇到了<code>setTimeout()</code>，这是一个宏任务，我们把他先放到宏任务队列里，先不管；</li><li>第三步，我们遇到了<code>promise</code>，因为promise内部函数默认是同步的，所以打印‘children4’;</li><li>第四步，执行<code>resolve()</code>，这个时候我们遇到了.<code>then()</code>函数，这是一个微任务，暂时存到微任务队列中；</li><li>第五步，再次遇到了<code>setTimeout()</code>，又是一个宏任务，再次放入宏任务队列中；</li><li>第六步，整体代码执行完毕，该执行当前任务下面的微任务了，所以执行.then()函数 打印‘children7’，这个时候我们又遇到了<code>setTimeout()</code>，先加入宏任务队列中；</li><li>第七步，现在整体代码的宏任务已经结束，我们该执行宏任务队列中的宏任务1了，打印’children2’，然后我们又遇到了.<code>then()</code> 先加入微任务队列，当前宏任务1已经执行结束了，开始执行微任务1，打印’children3’，到此宏任务1执行结束；</li><li>第八步，执行宏任务2，打印’children5’, 并没有属于当前宏任务的微任务，到这里宏任务2执行结束；</li><li>第九步，执行宏任务3，打印’children6’,并没有属于当前宏任务的微任务，到这里宏任务3执行结束;</li></ul><p>到此所有任务全部结束。</p><p>按照上面的执行结果，可以得到：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// start</span><span class="token comment">// children4</span><span class="token comment">// children7</span><span class="token comment">// children2</span><span class="token comment">// children3</span><span class="token comment">// children5</span><span class="token comment">// children6</span></code></pre><p>接下来我们再来看一个例子：</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token function"> async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span><span class="token function"> async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 微任务1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token function"> async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2 end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token parameter"> </span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token parameter"> </span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">    resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token parameter"> </span><span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise end'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 微任务2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span></code></pre><p>如上述代码所示，我们加入了<code>async/await</code>，唯一需要我们注意的就是<code>await()</code> 之后的代码加入微服务队列；我们再来一步一步分析一下：</p><ul><li>第一步，先执行整体代码宏任务，打印了’script start’;</li><li>第二步，执行<code>async1()</code>，打印了’async1 start’，再执行<code>async2()</code>，打印’async2 end’，同时将<code>await async2()</code>后面的代码加入微任务队列中；</li><li>第三步，遇到了<code>setTimeout()</code>，加入宏任务队列；</li><li>第四步，执行<code>new Promise</code>，打印’promise start’，然后执行.<code>then()</code>函数加入微服务队列，执行<code>console.log(&#39;script end&#39;)</code>， 打印’script end’；</li><li>第五步，执行微任务1，打印’async1 end’，再次执行微任务2，打印’promise end’；</li><li>第六步，执行宏任务队列中的<code>setTimeout()</code>，打印’setTimeout’;到此整个任务执行结束。</li></ul><p>上述代码的输出顺序如下：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// script start</span><span class="token comment">// async1 start</span><span class="token comment">// async2 end</span><span class="token comment">// promise start</span><span class="token comment">// script end</span><span class="token comment">// async1 end</span><span class="token comment">// promise end</span><span class="token comment">// setTimeout</span></code></pre><p>到此就是基于浏览器的事件循环机制，当然还有基于Node的版本，后续会放进来。</p>]]></content>
      
      
      <categories>
          
          <category> 你不知道的JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的JS——作用域篇</title>
      <link href="2020/12/26/js-scope/"/>
      <url>2020/12/26/js-scope/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210406175259388.png" alt="image-20210406175259388">        </p><a id="more"></a><p>所谓的作用域可以简单理解成一个房子，在全局中，我们有个全局的作用域，在这个房子里所有的东西都可以使用，此时如果有个函数<code>function a() &#123;&#125;</code>, 那么在这个全局的房子中就会生成一个命名为<code>a</code>的一个小房间，在这个小房间中，我们可以拿到外面的大房子的东西，但是大房子不能去拿小房子的东西，这就是所谓的作用域。</p><blockquote><p>​        在一个函数<code>function a() &#123;&#125;</code>中，这个a函数会存在很多属性，但是有一个属性，我们时没有办法访问到的，那就是——<code>[[scope]]</code>:</p></blockquote><p>​        那这个<code>[[scope]]</code>是干什么的呢，我们就可以简单的理解成它就是作用域，存放着种种的嵌套关系的一个变量。在了解这个<code>[[scope]]</code>之前，我们要了解一下执行期上下文的概念，那么什么是执行器上下文呢？所谓的执行器上下文就是我们之前说的预编译的环节，当函数之前的前一刻，生成<code>AO</code>对象那四个步骤。当函数定义的时候，会先在<code>[[scope]]</code>这个属性里，先生成一个栈，这个栈就是后来我们经常说的作用域链，在定义的时候，会在该栈推入一个<code>GO</code>（全局执行器上下文）,当执行这个函数的时候，会在原有的栈的基础上，接着推入该函数自己的执行期上下文（<code>AO</code>）,如果存在函数嵌套关系以此类推，说了这么多，还是不知道啥玩意儿？没关系！我们直接上代码，并结合流程图分析一下就明白了。</p><p>​        我们在这里来举一个例子：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如上代码所示，我们声明了一个<code>a</code>函数，在<code>a</code>函数的内部又声明了一个变量<code>a</code>和一个<code>b</code>函数，在<code>b</code>函数中声明了一个变量<code>b</code>，然后在<code>a</code>函数中执行了<code>b</code> 函数，再最外层执行了<code>a</code>函数。那么这个时候JS引擎可做了不止这么多的事，接下来我们配合流程图来对这段代码一步一步的执行一下，相信我，你会对JS有一个重新的认识！</p><ol><li><p>声明<code>a</code>函数的时候被称为<code>a</code>函数的定义，系统则会在 <code>[[scope]]</code> 属性上挂载一个类似于数组（其实就是栈）一样的东西，然后在这个数组中的第0位保存全局执行器上下文<code>GO</code>以及其他各种全局的变量，例如<code>window</code>对象，<code>document</code>对象等， 如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/a-Defined.png" alt="image-20201225162436941"></p></li><li><p>这个时候仅仅是<code>a</code>函数的定义，接下来就是<code>a</code>函数的执行，同样的，<code>a</code>函数会生成自己的执行期上下文<code>AO</code> ，其内部包含了<code>a</code>变量以及<code>b</code>函数等对象，同时往栈内压入<code>a</code>函数的<code>AO</code>对象：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/a-Run.png" alt="image-20201225163132455"></p></li><li><p>当<code>a</code>函数的执行的时候，遇到了<code>b</code>函数的定义，在定义的时候<code>b</code>函数保留了<code>a</code>函数的所有的“遗传信息”，所以可以理解为<code>b</code>函数 拷贝了一份执行期上下文当作自己的执行器上下文：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/b-Defined.png" alt="image-20201225164043286"></p></li><li><p>我们可以这么理解<code>b</code>函数是站在<code>a</code>函数的角度去看世界的，所以<code>b</code>函数一出生就有个很好的环境（啥都有）,这个时候<code>b</code>函数执行，生成了自己的执行期上下文<code>bAO</code>，并推入数组的首位：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/b-Run.png" alt="image-20201225164247981"></p></li></ol><p>由上述我们可以知道，原来简单的一个函数嵌套函数也有这么复杂的逻辑保留在JS引擎中，最后我们再总结一下：</p><table><thead><tr><th>函数运行状态</th><th>作用域</th><th>保存的值</th></tr></thead><tbody><tr><td>a函数执行时：</td><td>[[scope]]</td><td>scopeChain[0] : aAO</td></tr><tr><td></td><td></td><td>scopeChain[1] : GO</td></tr><tr><td>b函数定义时</td><td>[[scope]]</td><td>scopeChain[0] : aAO</td></tr><tr><td></td><td></td><td>scopeChain[1] : GO</td></tr><tr><td>b函数执行时</td><td>[[scope]]</td><td>scopeChain[0] : bAO</td></tr><tr><td></td><td></td><td>scopeChain[1] : aAO</td></tr><tr><td></td><td></td><td>scopeChain[2] : GO</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 你不知道的JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不知道的JS——解析篇</title>
      <link href="2020/12/26/js-resolving/"/>
      <url>2020/12/26/js-resolving/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20210406175136405.png" alt="image-20210406175136405"></p><a id="more"></a><p>​         众所周知，<code>JS</code>是单线程的一种语言，所谓单线程就是需要根据代码一行一行去执行并输出结果，如果有一系列的代码，其中有一个因为某种原因导致阻塞，那么后续的模块将无法执行。今天我们就来聊一聊<code>JS</code>的解析方式，知道<code>JS</code>是怎么去一步一步的将我们的代码编译出来的。</p><p> ​      当我们编写出我们自己逻辑代码时，<code>JS</code>引擎会经历<code>词法分析</code>、<code>预编译</code>、<code>解释执行</code>三个阶段：</p><h2 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a><strong>词法分析</strong></h2><p> ​        所谓词法分析就是一个扫描的过程，可以理解成JS引擎拿到这串代码后，大致检查一下有没有一些低级的语法错误等等。</p><blockquote></blockquote><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a><strong>预编译</strong></h2><p> ​        以前我们刚学<code>JS</code>的时候也大致都了解过预编译的过程：1.函数声明提升；2.变量 声明提升；大致意思就是执行之前，会将变量与函数给单独提出来，然后放到该作用域的最顶端，然后进行下一步的解释执行。这两句话确实能解决一部分问题，但是真的能解决所有问题嘛？答案是不能，咱们接着往下看。</p><blockquote></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>如上代码块，如果我们遇到了这种问题，该怎么去解决呢，以上的那两句话就无法用于这种情况了。这时候就需要我们要了解一下预编译的四个步骤了：</p><ol><li><strong>创建<code>AO（Activation Object）</code>执行期上下文（作用域）对象；</strong></li><li><strong>查找形参和变量的声明，作为<code>AO</code>的<code>key</code>，挂载到<code>AO</code>对象上去，并赋值为<code>undefined</code>；</strong></li><li><strong>将实参值和形参统一；</strong></li><li><strong>在函数体里面找函数声明，值赋予函数体。</strong></li></ol><p>接下来我们对照上面的代码，按照这个步骤一步一步的来分析这段代码是如何解释执行的：</p><ul><li><p>首先，第一步创建<code>AO</code>对象：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// create Activity Object</span><span class="token constant">AO</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>第二步，查找形参与变量的声明，可以看到上述代码中，有一个形参<code>a</code>，声明的变量<code>a</code>，以及声明的变量<code>b</code>，并赋值为<code>undefined</code>，那可以有如下写法:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token constant">AO</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>    b<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>第三步，将实参值和形参值统一：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token constant">AO</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 由undefined 变为实参 1</span>    b<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>第四步，在函数体内找函数声明，有上述代码我们可以看到函数体有<code>a</code>和<code>d</code>，值赋予函数体，于是这个<code>AO</code>又发生了变化了：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token constant">AO</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">a</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 由实参 1 变为了a函数体</span>    b<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>    <span class="token function-variable function">d</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h2 id="解释执行"><a href="#解释执行" class="headerlink" title="解释执行"></a>解释执行</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function a() &#123;&#125;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>    <span class="token keyword">var</span> <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function () &#123;&#125;</span>    <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>    c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> c<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>    <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> c<span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">// 执行到此处a变成了123,这个时候a is not a function </span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span>    <span class="token function-variable function">c</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行结果：报错</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 你不知道的JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将手写Webpack和手写loader结合使用</title>
      <link href="2020/12/25/combine-webpack-and-loader/"/>
      <url>2020/12/25/combine-webpack-and-loader/</url>
      
        <content type="html"><![CDATA[<h2 id="将手写Webpack和手写loader结合使用"><a href="#将手写Webpack和手写loader结合使用" class="headerlink" title="将手写Webpack和手写loader结合使用"></a>将手写Webpack和手写loader结合使用</h2><p>​        在之前的文章中，我们手写了一个<code>Webpack</code>和独立的实现了<code>style-loader</code>和<code>less-loader</code>，在这里呢，我们准备把两个手写案例结合到一起，看看是否能够用我们手写的<code>Webpack</code>通过我们编写的<code>loader</code>来打包文件。</p><p>​        让我们新建一个名称为<code>webpackUseSelfLoader</code>的文件夹，首先<code>npm init</code>一下，我们会获取到<code>package.json</code>的文件，然后我们按照之前的文件目录分别创建好我们的文件。然后安装一下<code>less</code>。我们在<code>index.js</code>文件中引入一下之前新建好的<code>index.less</code>文件。</p><blockquote></blockquote><a id="more"></a><pre class="language-less" data-language="less"><code class="language-less"><span class="token comment">// index.less</span><span class="token selector">html, body</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token selector">div</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// index.js</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./index.less'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​        紧接着，我们将<code>webpack.config.js</code>中的<code>module</code>模块，先注释，然后将我们之前写好的<code>jspack</code>放入到当前项目的<code>node_modules</code>中，稍微等待一下初始化加载过程后，我们进入<code>node_modules/jspack</code>，然后打开命令行，输入命令：<code>npm link</code>。</p><p>​        接下来我们来试一下能否打包成功，先修改<code>index.js</code>中的代码，然后再项目的根目录中打开控制台输入：<code>npx jspack</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// index.js</span><span class="token comment">// require('./index.less');</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'jspack 已经打包结束'</span><span class="token punctuation">)</span></code></pre><p> ​        如果上述打包没有问题，就可以进入我们的下一步了。首先我们将<code>webpack.config.js</code>中的<code>module</code>注释放开，然后来思考一下这边的逻辑：如果我们读取到的是<code>js</code>文件，则直接返回代码交由<code>jspack</code>打包即可；如果我们读取到的不是<code>js</code>文件，则需要交由<code>loader</code>去处理过后，再交给<code>jspack</code>来进行打包；所以我们需要在读取文件的时候去做这个判断才可以。</p><blockquote></blockquote><p>​        我们找到之前写的<code>Complier.js</code>找到<code>getSource</code>方法，我们进行如下改造：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// path为./index.less</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1.需要判断当前文件是否是js文件，我们可以通过path的后缀去判断</span>    <span class="token comment">// 1.1 我们需要获取到module内配置的规则</span>    <span class="token keyword">const</span> rules <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>module<span class="token punctuation">.</span>rules<span class="token punctuation">;</span> <span class="token comment">// 因为是数组，我们需要遍历一下</span>    rules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rule</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.2 获取到的rule为&#123; test: /\.less$/, use: [.....] &#125;，可以使用结构取出校验正则和需要使用的loader</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> test<span class="token punctuation">,</span> use <span class="token punctuation">&#125;</span> <span class="token operator">=</span> rule<span class="token punctuation">;</span>        <span class="token comment">// 1.3 进行判断</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 1.4 如果验证通过，则需要使用loader处理，然后loader是从右至左，从下至上来使用的，所以这里需要我们去倒序遍历</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> use<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 1.5 我们需要在这里拿到每个loader的方法，然后将我们获取到的content传递进去</span>                <span class="token keyword">const</span> loader <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>use<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> loader <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    content <span class="token operator">=</span> <span class="token function">loader</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>use<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>loader<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">获取失败</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> content<span class="token punctuation">&#125;</span></code></pre><p>​        接着我们可以试一下将<code>index.js</code>中的代码变为引入<code>index.less</code>文件，再次进行打包。这个时候会发现我们打包成功了，然后生成一个<code>index.html</code>并将打包过后的代码引入，我们会发现样式已经生效了，到此。自定义<code>webpack</code>和自定义<code>loader</code>就到此结束了。</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack原理之手写loader源码</title>
      <link href="2020/12/24/webpack-and-loader/"/>
      <url>2020/12/24/webpack-and-loader/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义loader"><a href="#自定义loader" class="headerlink" title="自定义loader"></a>自定义loader</h2><p>​    在我们正式开始手写<code>loader</code>之前，我们先来看看<code>loader</code>到底是个什么东西：</p><p>​    <code>loader</code>：<code>loader</code>的本质其实就是一个导出为函数的一个js模块，该函数接收一个参数<code>source</code>，<code>source</code>的内容，<code>compiler</code> 需要得到最后一个 <code>loader</code> 产生的处理结果。这个处理结果应该是 <code>String</code> 或者 <code>Buffer</code>（被转换为一个 <code>string</code>），代表了模块的 <code>JavaScript</code> 源码。另外还可以传递一个可选的 <code>SourceMap</code> 结果（格式为 <code>JSON</code> 对象）。</p><a id="more"></a><p>那么<code>loader</code>分为两种：同步<code>loader</code>和异步<code>loader</code>。所谓同步<code>loader</code>表示只要处理单个结果，使用同步模式然后直接返回结果；如果我们需要处理多个结果，我们则需要使用内置<code>api--&gt;this.async()，const  callback = this.async()；</code>其内部原理就只是一个闭包，所以<code>callback</code>是一个函数，它接收4个参数：</p><p>第一个参数必须是 <code>Error</code> 或者 <code>null</code>；</p><p>第二个参数是一个 <code>string</code> 或者 <code>Buffer</code>；</p><p>可选的：第三个参数必须是一个可以被这个模块解析的 <code>source map</code>；</p><p>可选的：第四个选项，会被 <code>webpack</code> 忽略，可以是任何东西（例如一些元数据）。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 同步loader</span>module<span class="token punctuation">.</span><span class="token function-variable function">export</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">do</span> something<span class="token operator">...</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 异步loader</span>module<span class="token punctuation">.</span><span class="token function-variable function">export</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">do</span> something<span class="token operator">...</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="编写一个简易的loader"><a href="#编写一个简易的loader" class="headerlink" title="编写一个简易的loader"></a>编写一个简易的loader</h2><p> ​    接下来我们来编写一个简单的<code>loader</code>，用于将代码中的“monday”替换成“sunday”，首先我们新建一个名称为<code>loader</code>的目录，再新建一个<code>ReplaceLoader.js</code>的<code>loader</code>：</p><blockquote></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// ReplaceLoader.js</span>module<span class="token punctuation">.</span><span class="token function-variable function">export</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">monday</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"sunday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p> ​    这样我们的简易版的<code>loader</code>就结束了，接下来我们再在<code>webpack.config.js</code>中使用这个<code>loader</code>：</p><blockquote></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.js</span>module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>            use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                loader<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./loader/ReplaceLoader.js'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p> ​    接下来我们打包试一下<code>npm run dev</code>：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 打包之后的index.js</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token comment">/***/</span> <span class="token string">"./src/index.js"</span><span class="token operator">:</span><span class="token comment">/*!**********************!*\  !*** ./src/index.js ***!  \**********************/</span><span class="token comment">/*! no static exports found */</span><span class="token comment">/***/</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"www.sunday.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由此我们可以看到打包过后变成了sunday说明我们的loader是起作用了</span><span class="token comment">// require('./index.less')</span><span class="token comment">/***/</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/******/</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="loader参数处理"><a href="#loader参数处理" class="headerlink" title="loader参数处理"></a>loader参数处理</h2><p>​    我们在配置<code>webpack</code>的配置项中，当使用到了<code>loader</code>之后，我们一般会在<code>loader</code>使用内部，添加<code>options</code>配置项来传递额外的参数。那么我们在编写<code>Loader</code>的时候如何拿到通过<code>options</code>传递过来的参数呢?其实有两种方法：</p><p>第一种：我们用过<code>loader</code>函数中提供的<code>this</code>来获取，比如我们配置了如下的<code>options</code>：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.js</span>rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    loader<span class="token operator">:</span> <span class="token string">'xxx-loader'</span><span class="token punctuation">,</span>    options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">'zhangsan'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><p>这样我们就可以通过<code>this.query.name</code>获取到<code>options</code>传递过来的参数；</p><p>第二种：我们可以通过第三方模块<code>loader-utils</code>获取：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 首先进行安装</span>npm install loader<span class="token operator">-</span>utils <span class="token operator">-</span><span class="token constant">D</span><span class="token comment">// 在当前编写的loader引入</span><span class="token keyword">const</span> loaderUtils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'loader-utils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过loaderUtils中的getOptions方法获取，注意：一定要把当前作用域中的this传递给该函数。</span><span class="token keyword">const</span> options <span class="token operator">=</span> loaderUtils<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    在我们配置<code>options</code>的时候，当我们配置项不符合要求时，我们希望控制台能够报错，能够准确无误的提示开发者，配置项哪里出错了，这个时候就需要我们对<code>options</code>进行一个校验。校验的话，我们需要使用第三方模块 <code>schema-utils</code>。使用方法如下：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 1.先安装schema-utils</span>npm install schema<span class="token operator">-</span>utils <span class="token operator">-</span><span class="token constant">D</span><span class="token comment">// 2.在当前编写的loader引入</span><span class="token keyword">const</span> validateOptions <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'schema-utils'</span><span class="token punctuation">)</span><span class="token comment">// 3.validateOptions为一个函数，接收3个参数分别为：校验规则rules， 需要校验的配置项options，需要校验的loader的名称</span><span class="token comment">// 4.校验规则如下</span><span class="token keyword">let</span> rules <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  type<span class="token operator">:</span> <span class="token string">"object"</span><span class="token punctuation">,</span>  properties<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 需要校验的属性</span>    name<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 需要校验的属性的数据类型</span>      type<span class="token operator">:</span> <span class="token string">"string"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    additionalProperties<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token function">validateOptions</span><span class="token punctuation">(</span>schema<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token string">'ReplaceLoader'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    通过上述方式配置了之后，我们来修改一下<code>webpack.config.js</code>的<code>options</code>：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.js</span>rules<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            loader<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'loader/ReplaceLoader.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">// options: &#123;</span>            <span class="token comment">//    name: 'wujian'</span>            <span class="token comment">// &#125;</span>            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                age<span class="token operator">:</span> <span class="token string">'18'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment">// 打包之后我们发现会报错：ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema. -configuration has an unknown property 'age'.</span>rules<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            loader<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'loader/ReplaceLoader.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>               name<span class="token operator">:</span> <span class="token number">123</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment">// 打包之后我们发现会报错：Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema. - configuration.name should be a string.</span></code></pre><p>​    由上述我们可知，当我们引用了<code>schema-utils</code>之后，能够帮我们校验传递的参数类型名称等是否正确，大大的降低了调试难度。</p><h2 id="loader导入方式"><a href="#loader导入方式" class="headerlink" title="loader导入方式"></a>loader导入方式</h2><p>​    由上面的内容，我们发现了一个问题，我们每次导入<code>loader</code>的时候会写很多的代码，但是在<code>webpack</code>中，我们导入直接导入当前的<code>loader</code>的名称即可，简化了代码的编写量，我们也可以这样吗？答案时肯定的，我们在<code>webpack</code>中有一个<code>resolve</code>配置，这里面就有个<code>resolveLoader</code>的配置项，有两种方式能够帮我们实现直接导入<code>loader</code>名称：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// webapck.config.js</span><span class="token comment">// 定义</span>resolveLoader<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 第一种方式，直接以modules开始，表示，如果要查找loader，先从node_modules中查找，如果找不到，则在指定的loader目录中查找即可；</span>    modules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'node_modules'</span><span class="token punctuation">,</span> <span class="token string">'./loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 第二种方式，直接给loader一个别名即可  </span>    alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>       ReplaceLoader<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./loader/ReplaceLoader.js'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用</span>rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        loader<span class="token operator">:</span> <span class="token string">'ReplaceLoader'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><h2 id="实战：手写style-loader和less-loader"><a href="#实战：手写style-loader和less-loader" class="headerlink" title="实战：手写style-loader和less-loader"></a>实战：手写style-loader和less-loader</h2><p>​    总算到了手写真实的<code>loader</code>环节了，摩拳擦掌，开干！！</p><p> ​    首先我们还是在<code>loader</code>文件夹下，新建<code>style-loader.js</code>和<code>less-loader.js</code>文件，然后我们在新建一个<code>less</code>文件，并写点<code>less</code>代码。首先我们先来实现<code>less-loader</code>，第一步离不开安装：<code>npm install less -D</code>，然后我们编写<code>less-loader</code>；</p><blockquote></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// less-loader.js</span><span class="token keyword">const</span> less <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'less'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// less 提供了一个render方法，接受两个参数，第一个参数为less代码</span>    <span class="token comment">// 第二个参数为一个回调函数，这个时候就出现了异步问题，所以我们使</span>    <span class="token comment">// 用异步loader的方式编写</span>    <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    less<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">.</span>css<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p> ​    到此，我们的<code>less-loader</code>就编写完了，其实就是调用了一个<code>less.render()</code>的方法，配合异步<code>loader</code>生成了<code>css</code>代码在回传给<code>webpack</code>，再经过<code>style-loader</code>处理编译后的<code>css</code>代码。那么话不多说，开搞<code>style-loader</code>，那么<code>style-loader</code>是将我们的<code>css</code>代码插入到<code>head</code>标签下：</p><blockquote></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// style-loader.js</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 注意：这里的source为已经转成的css代码</span>    <span class="token comment">// 1.动态的生成style标签</span>    <span class="token keyword">let</span> style <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.将css代码插入到style标签中</span>    style<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3.将style标签插入到head标签中</span>    document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.这个时候我们就会有疑问了，每个loader都需要返回值（String | Buffer）,显然这里将代码变成String更为简单些：</span>    <span class="token keyword">let</span> style <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">let style = document.createElement('style');        style.innerHTML = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">;        document.head.appendChild(style);</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">return</span> style<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p> ​    到此，我们的<code>style-loader</code>和<code>less-loader</code>编写完毕了，是不是so easy，too happy啊！</p><blockquote></blockquote><p>那我们来使用一下吧：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.config.js</span>rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    use<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            loader<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./loader/style-loader'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            loader<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./loader/less-loader'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span></code></pre><p>​    这些准备工作完成后，我们开始打包，因为在这边没法展示打包结果，经过我们的打包后发现没有什么问题， <code>loader</code>可正常执行。接下来，我们将手写的<code>webpack</code>和手写的<code>loader</code>放入一起，看看能不能擦出什么火花，一起期待吧！</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack原理以及手写Webpack</title>
      <link href="2020/12/23/webpack-source/"/>
      <url>2020/12/23/webpack-source/</url>
      
        <content type="html"><![CDATA[<h2 id="Webpack如何打包文件"><a href="#Webpack如何打包文件" class="headerlink" title="Webpack如何打包文件"></a>Webpack如何打包文件</h2><p>在我们正式开始手写<code>webpack</code>之前，我们先来看看<code>webpack</code>是如何打包文件的，在之前的文章中，我们说过，如果想利用<code>webpack</code>来对我们的项目进行打包，可分为三个步骤：</p><ol><li><p>我们需要安装<code>webpack</code>以及<code>webpack-cli</code>，这里需要我们注意一点的是，<code>webpack-cli</code> 建议安装<code>3.x</code>的版本，否则会出现其他异常问题(因为<code>webpack5</code>刚出来，可能是兼容没有做好)；</p></li><li><p>我们需要指定配置文件名称需为<code>webpack.config.js</code>，在其内部进行<code>webpack</code>的配置；</p></li><li><p>最后我们通过命令 <code>$ npx webpack</code> 来对指定文件进行打包。</p></li></ol><p>所以，综上所述<code>webpack</code>就是一个工具模块，提供了<code>webpack</code>指令，所以要想实现<code>webpack</code>必须先实现一个工具模块。</p><a id="more"></a><h2 id="如何实现一个基于Node的工具模块"><a href="#如何实现一个基于Node的工具模块" class="headerlink" title="如何实现一个基于Node的工具模块"></a>如何实现一个基于Node的工具模块</h2><ol><li><p>首先，我们先新建一个目录，名称为<code>jswebpack</code>，在该文件夹内部新建一个<code>node_modules</code>文件夹，在该文件夹下新建<code>jspack</code>目录作为工具模块，然后打开控制台，输入以下命令进行初始化：</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">npm</span> init</code></pre></li><li><p>在<code>jspack</code>文件夹下，新建一个<code>bin</code>目录，内部新建一个<code>index.js</code>文件，在<code>index.js</code>中添加以下代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env nodeconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world！'</span><span class="token punctuation">)</span></code></pre><p>然后在<code>package.json</code>中添加如下代码：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"jspack"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  ++<span class="token property">"bin"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  ++ <span class="token property">"jspack"</span><span class="token operator">:</span> <span class="token string">"bin/index.js"</span>  ++ <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"ejs"</span><span class="token operator">:</span> <span class="token string">"^3.1.5"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>最后我们在<code>jspack</code>文件夹对应的命令行中输入：</p>   <pre class="language-sh" data-language="sh"><code class="language-sh">$ npm link</code></pre><p>到此，我们可以通过在控制台 <code>npx jspack</code> 命令，如果控制台输出’<code>hello world</code>‘则表示我们的工具模块已经实现了。</p></li></ol><h2 id="配置Webpack"><a href="#配置Webpack" class="headerlink" title="配置Webpack"></a>配置Webpack</h2><p>由上，我们实现了一个工具模块，接下来，我们来配置一个简易版的<code>webpack.config.js</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    devtool<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>    mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        filename<span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"bundle"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>然后我们在项目根目录下新建<code>src</code>文件夹，在内部新建<code>index.js</code>文件，用于编写项目打包内容。</p><h2 id="分析Webpack打包后的文件"><a href="#分析Webpack打包后的文件" class="headerlink" title="分析Webpack打包后的文件"></a>分析Webpack打包后的文件</h2><p>我们在打包之后，可以去观察以下打包过后的源码，有的同学可能会说，那玩意太难懂了，不知道什么意思，其实我们只要把注释和一些没必要的代码干掉，我们就得到了如下的代码：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// webpackBootstrap</span>    <span class="token comment">// 1.初始化一个缓存</span>    <span class="token keyword">var</span> installedModules <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 2.自己实现了一个require方法</span>    <span class="token keyword">function</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// "./src/index.js"</span>        <span class="token comment">// 2.1判断缓存中有没有当前需要使用的模块</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span>exports<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 2.2自己创建一个缓存</span>        <span class="token keyword">var</span> module <span class="token operator">=</span> installedModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">:</span> moduleId<span class="token punctuation">,</span>            l<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            exports<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// Execute the module function</span>        modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Flag the module as loaded</span>        module<span class="token punctuation">.</span>l <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// Return the exports of the module</span>        <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 以下代码我们无需理会 */</span><span class="token comment">/*    __webpack_require__.m = modules;    __webpack_require__.c = installedModules;    __webpack_require__.d = function (exports, name, getter) &#123;        if (!__webpack_require__.o(exports, name)) &#123;            Object.defineProperty(exports, name, &#123;enumerable: true, get: getter&#125;);        &#125;    &#125;;    __webpack_require__.r = function (exports) &#123;        if (typeof Symbol !== 'undefined' &amp;&amp; Symbol.toStringTag) &#123;            Object.defineProperty(exports, Symbol.toStringTag, &#123;value: 'Module'&#125;);        &#125;        Object.defineProperty(exports, '__esModule', &#123;value: true&#125;);    &#125;;    __webpack_require__.t = function (value, mode) &#123;        if (mode &amp; 1) value = __webpack_require__(value);        if (mode &amp; 8) return value;        if ((mode &amp; 4) &amp;&amp; typeof value === 'object' &amp;&amp; value &amp;&amp; value.__esModule) return value;        var ns = Object.create(null);        __webpack_require__.r(ns);        Object.defineProperty(ns, 'default', &#123;enumerable: true, value: value&#125;);        if (mode &amp; 2 &amp;&amp; typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) &#123;            return value[key];        &#125;.bind(null, key));        return ns;    &#125;;    __webpack_require__.n = function (module) &#123;        var getter = module &amp;&amp; module.__esModule ?            function getDefault() &#123;                return module['default'];            &#125; :            function getModuleExports() &#123;                return module;            &#125;;        __webpack_require__.d(getter, 'a', getter);        return getter;    &#125;;    __webpack_require__.o = function (object, property) &#123;        return Object.prototype.hasOwnProperty.call(object, property);    &#125;;    __webpack_require__.p = "";*/</span>    <span class="token keyword">return</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">"./src/index.js"</span><span class="token operator">:</span> <span class="token comment">// key</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// value</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'手写webpack'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果我们改变了<code>config</code>配置文件，我们再重新打包几次观察以下，其实变化的只有以下部分:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...其他代码</span>    <span class="token keyword">return</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 路径变化</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">"./src/index.js"</span><span class="token operator">:</span> <span class="token comment">// key 变化</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'手写webpack'</span><span class="token punctuation">)</span> <span class="token comment">// value 变化</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>所以，我们通过观察打包之后的代码我们可以清楚的知道，其实我们只需要两个变量即可，一个路径和内部代码。所以我们可以把这些变量放到一个对象中，对象的<code>Key</code>就是入口文件路径，<code>Value</code>就是入口文件内部的代码。其他剩下的代码，我们可以利用<code>EJS</code>当作模板去传到生成的文件中。</p><p>首先，我们需要安装<code>ejs</code>：</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">npm</span> <span class="token function">install</span> ejs -S</code></pre><p>然后修改内部变量为<code>&lt;%-variable%&gt;</code>，并将该模板后缀改为<code>.ejs</code>，然后保存在lib文件夹下:</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...其他代码</span>    <span class="token keyword">return</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token string">"&lt;%-entryId%>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 路径变化</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">"&lt;%-entryId%>"</span><span class="token operator">:</span> <span class="token comment">// key 变化</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span>modules<span class="token punctuation">[</span>entryId<span class="token punctuation">]</span><span class="token operator">%</span><span class="token operator">></span> <span class="token comment">// value 变化</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="开始手写Webpack"><a href="#开始手写Webpack" class="headerlink" title="开始手写Webpack"></a>开始手写Webpack</h2><p>接下来，我们就正式进入手写简易<code>webpack</code>。还记得我们在<code>jspack</code>中<code>bin</code>目录下的<code>index.js</code>文件吗？这个就是我们<code>jspack</code>的入口文件，让我们回想以下<code>Webpack</code>如何打包文件，我们应该先去读取<code>webpack.config.js</code>的配置项：</p><blockquote></blockquote><p>​    那么<code>index.js</code>中应该这么写，首先我们肯定是要操作某一个文件的，所以我们就需要用到<code>Node</code>中的<code>path</code>模块。若想读取文件内容我们则要知道该文件的路径是什么，代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// bin/index.js</span>#<span class="token operator">!</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> configPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'webpack.config.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> configContent <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那么既然配置项我们获取到了，那就需要有一个函数或者方法来充当编译器，所以我们在<code>jspack</code>下新建一个<code>lib/Complier.js</code>：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// lib/Complier.js</span><span class="token keyword">class</span> <span class="token class-name">Complier</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Complier</code></pre><p>声明好了编译器之后，我们将 <code>Complier</code> 引入到 <code>bin/index.js</code> 中，并且实例化：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// bin/index.js</span>#<span class="token operator">!</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env node<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Complier <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../lib/Complier.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> configPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'webpack.config.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> configContent <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 进行实例化,并将获取到的配置文件传给Complier类</span><span class="token keyword">const</span> complier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Complier</span><span class="token punctuation">(</span>configContent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当使用命令行 npx jspack 时会调用 Complier 类中的run方法</span></code></pre><p>所以这个时候我们再返回到 <code>lib/Complier.js</code> 处理编译的逻辑：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// lib/Complier.js</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Complier</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> config<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>modules <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 用于构建key：value对象</span>    <span class="token punctuation">&#125;</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 开始构建</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">commitFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取模板并将其变量匹配之后生成打包之后的目录</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取需要打包的文件路径以及源码，并拼成key：value格式</span>    <span class="token function">buildModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> entryPath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>entry<span class="token punctuation">;</span> <span class="token comment">// 获取需要打包文件的路径,作为Key</span>        <span class="token keyword">const</span> code <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>entryPath<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取需要打包文件内容，作为Value</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>modules<span class="token punctuation">[</span>entryPath<span class="token punctuation">]</span> <span class="token operator">=</span> code<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">commitFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1.获取ejs模板</span>        <span class="token comment">// 1.1获取ejs路径</span>        <span class="token keyword">const</span> ejsPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'main.ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1.2根据路径来啊过去ejs模板</span>        <span class="token keyword">const</span> ejsTemplate <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>ejsPath<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1.3将ejs模板与变量相匹配</span>        <span class="token keyword">const</span> matchVariable <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            entryId<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>entry<span class="token punctuation">,</span>            modules<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modules        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> sourceCode <span class="token operator">=</span> ejs<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>ejsTemplate<span class="token punctuation">,</span> matchVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.将获取到的模板输出至指定文件夹</span>        <span class="token comment">// 2.1 获取从配置项中输出的文件夹目录,并且需要判断该目录是否存在</span>        <span class="token keyword">const</span> outputDir <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>output<span class="token punctuation">.</span>path<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>outputDir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>outputDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 2.2 新建一个文件，名称与配置项中的pathname保持一致</span>        <span class="token keyword">const</span> outputPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>outputDir<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>output<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.3 写入文件</span>        fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>outputPath<span class="token punctuation">,</span> sourceCode<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> Complier<span class="token punctuation">;</span></code></pre><p>这个时候，我们的编译器的功能就完成了，接下来我们来看看效果：</p><p><img src="https://cdn.jsdelivr.net/gh/Indexsarrol/image/blogs/image-20201224205107321.png" alt="image-20201224205107321"></p><p>这样，我们就编写了一个简易的<code>webpack</code>，在下篇文章中我们来看看如何打包多文件。尽请期待吧~</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
